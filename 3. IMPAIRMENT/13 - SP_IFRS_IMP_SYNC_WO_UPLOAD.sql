---- DROP PROCEDURE SP_IFRS_IMP_SYNC_WO_UPLOAD;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_SYNC_WO_UPLOAD(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    
    ---- VARIABLE PROCESS
    V_ROW_CF INT;
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLEINSERT1 := 'IFRS_MASTER_WO_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_MASTER_WO_RECOVERY_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLEINSERT1 := 'IFRS_MASTER_WO';
        V_TABLEINSERT2 := 'IFRS_MASTER_WO_RECOVERY';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;

    V_ROW_CF := 0;
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT1 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT1 || ' AS SELECT * FROM IFRS_MASTER_WO WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT2 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT2 || ' AS SELECT * FROM IFRS_MASTER_WO_RECOVERY WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || ' 
        SELECT COUNT(*) FROM TBLU_WO_CF 
        WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND (DATE_TRUNC(''MONTH'', WO_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY) INTO V_ROW_CF;

    IF V_ROW_CF > 0 THEN 
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT1 || ' WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND SOURCE_TABLE = ''STG_M_WO_CF'' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT2 || ' WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND SOURCE_TABLE = ''STG_M_RECOVERY_CF'' ';
        EXECUTE (V_STR_QUERY);
    END IF;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT1 || ' WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND CREATEDBY IN (''WO_UPLOAD'') AND SOURCE_TABLE NOT IN (''IFRS_MASTER_WO_MB'') ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT2 || ' WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND CREATEDBY IN (''WO_UPLOAD'') AND SOURCE_TABLE NOT IN (''IFRS_MASTER_WO_MB'') ';
    EXECUTE (V_STR_QUERY);

    ---- START OF WO SECTION
    ---- MITRA BISNIS / MB
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
        (
            DOWNLOAD_DATE 
            ,MASTERID 
            ,CUSTOMER_NUMBER 
            ,ACCOUNT_NUMBER 
            ,ACCOUNT_STATUS 
            ,DATA_SOURCE 
            ,PRODUCT_CODE 
            ,EXCHANGE_RATE 
            ,CURRENCY 
            ,WRITEOFF_DATE 
            ,OUTSTANDING_WO 
            ,CO_FLAG 
            ,BI_COLLECTABILITY 
            ,WRITEOFF_FLAG 
            ,PRODUCT_ENTITY 
            ,NPL_FLAG 
            ,SOURCE_TABLE 
            ,CREATEDBY 
        ) SELECT 
            (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE AS DOWNLOAD_DATE 
            ,CONCAT(TRIM(CUSTOMER_NUMBER), ''_'', TRIM(ACCOUNT_NUMBER), ''_'', TRIM(PRODUCT_CODE)) AS MASTERID 
            ,TRIM(CUSTOMER_NUMBER) AS CUSTOMER_NUMBER 
            ,TRIM(ACCOUNT_NUMBER) AS ACCOUNT_NUMBER 
            ,''W'' AS ACCOUNT_STATUS 
            ,''LOAN'' AS DATA_SOURCE 
            ,TRIM(PRODUCT_CODE) AS PRODUCT_CODE 
            ,1 AS EXCHANGE_RATE 
            ,CURRENCY 
            ,WO_DATE::DATE 
            ,WO_AMOUNT::DOUBLE PRECISION 
            ,CO_FLAG 
            ,5 AS BI_COLLECTABILITY 
            ,1 AS WRITEOFF_FLAG 
            ,''C'' AS PRODUCT_ENTITY 
            ,1 AS NPL_FLAG 
            ,''TBLU_WO_MB'' AS SOURCE_TABLE 
            ,''WO_UPLOAD'' AS CREATEDBY 
        FROM TBLU_WO_MB 
        WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND (DATE_TRUNC(''MONTH'', WO_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    ---- CONSUMER FINANCE / CF
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
        (
            DOWNLOAD_DATE
            ,MASTERID
            ,CUSTOMER_NUMBER
            ,ACCOUNT_NUMBER
            ,ACCOUNT_STATUS
            ,DATA_SOURCE
            ,PRODUCT_CODE
            ,EXCHANGE_RATE
            ,CURRENCY
            ,WRITEOFF_DATE
            ,OUTSTANDING_WO
            ,CO_FLAG
            ,BI_COLLECTABILITY
            ,WRITEOFF_FLAG
            ,PRODUCT_ENTITY
            ,NPL_FLAG
            ,SOURCE_TABLE
            ,CREATEDBY
        ) SELECT 
            (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE AS DOWNLOAD_DATE 
            ,CONCAT(TRIM(CUSTOMER_NUMBER), ''_'', TRIM(ACCOUNT_NUMBER), ''_'', TRIM(PRODUCT_CODE)) AS MASTERID 
            ,TRIM(CUSTOMER_NUMBER) AS CUSTOMER_NUMBER 
            ,TRIM(ACCOUNT_NUMBER) AS ACCOUNT_NUMBER 
            ,''W'' AS ACCOUNT_STATUS 
            ,''LOAN'' AS DATA_SOURCE 
            ,TRIM(PRODUCT_CODE) AS PRODUCT_CODE 
            ,1 AS EXCHANGE_RATE 
            ,CURRENCY 
            ,WO_DATE::DATE 
            ,WO_AMOUNT::DOUBLE PRECISION 
            ,CO_FLAG 
            ,5 AS BI_COLLECTABILITY 
            ,1 AS WRITEOFF_FLAG 
            ,''C'' AS PRODUCT_ENTITY 
            ,1 AS NPL_FLAG 
            ,''TBLU_WO_CF'' AS SOURCE_TABLE 
            ,''WO_UPLOAD'' AS CREATEDBY 
        FROM TBLU_WO_CF 
        WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND (DATE_TRUNC(''MONTH'', WO_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    ---- JENIUS
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
        (
            DOWNLOAD_DATE
            ,MASTERID
            ,CUSTOMER_NUMBER
            ,ACCOUNT_NUMBER
            ,ACCOUNT_STATUS
            ,DATA_SOURCE
            ,PRODUCT_CODE
            ,EXCHANGE_RATE
            ,CURRENCY
            ,WRITEOFF_DATE
            ,OUTSTANDING_WO
            ,CO_FLAG
            ,BI_COLLECTABILITY
            ,WRITEOFF_FLAG
            ,PRODUCT_ENTITY
            ,NPL_FLAG
            ,SOURCE_TABLE
            ,CREATEDBY
        ) SELECT 
            (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE AS DOWNLOAD_DATE 
            ,CONCAT(TRIM(CUSTOMER_NUMBER), ''_'', TRIM(ACCOUNT_NUMBER), ''_'', TRIM(PRODUCT_CODE)) AS MASTERID 
            ,TRIM(CUSTOMER_NUMBER) AS CUSTOMER_NUMBER 
            ,TRIM(ACCOUNT_NUMBER) AS ACCOUNT_NUMBER 
            ,''W'' AS ACCOUNT_STATUS 
            ,''LOAN'' AS DATA_SOURCE 
            ,TRIM(PRODUCT_CODE) AS PRODUCT_CODE 
            ,1 AS EXCHANGE_RATE 
            ,CURRENCY 
            ,WO_DATE::DATE 
            ,WO_AMOUNT::DOUBLE PRECISION 
            ,CO_FLAG 
            ,5 AS BI_COLLECTABILITY 
            ,1 AS WRITEOFF_FLAG 
            ,''C'' AS PRODUCT_ENTITY 
            ,1 AS NPL_FLAG 
            ,''TBLU_WO_JENIUS'' AS SOURCE_TABLE 
            ,''WO_UPLOAD'' AS CREATEDBY 
        FROM TBLU_WO_JENIUS 
        WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND (DATE_TRUNC(''MONTH'', WO_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;
    ---- END OF WO SECTION

    ---- START OF RECOVERY SECTION
    ---- MITRA BISNIS / MB
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT2 || ' 
        (
            DOWNLOAD_DATE 
            ,MASTERID 
            ,ACCOUNT_NUMBER 
            ,ACCOUNT_STATUS 
            ,EXCHANGE_RATE 
            ,CURRENCY 
            ,CUSTOMER_NUMBER 
            ,DATA_SOURCE 
            ,BI_COLLECTABILITY 
            ,OUTSTANDING_WO 
            ,PRODUCT_CODE 
            ,RECOVERY_DATE 
            ,RECOVERY_AMOUNT 
            ,TOTAL_RECOVERY 
            ,SOURCE_TABLE 
            ,CREATEDBY 
        ) SELECT 
            (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE AS DOWNLOAD_DATE 
            ,CONCAT(TRIM(CUSTOMER_NUMBER), ''_'', TRIM(ACCOUNT_NUMBER), ''_'', TRIM(PRODUCT_CODE)) AS MASTERID 
            ,TRIM(ACCOUNT_NUMBER) AS ACCOUNT_NUMBER 
            ,''W'' AS ACCOUNT_STATUS 
            ,1 AS EXCHANGE_RATE 
            ,CURRENCY 
            ,TRIM(CUSTOMER_NUMBER) AS CUSTOMER_NUMBER 
            ,''LOAN'' AS DATA_SOURCE 
            ,5 AS BI_COLLECTABILITY 
            ,NULL AS OUTSTANDING_WO 
            ,TRIM(PRODUCT_CODE) AS PRODUCT_CODE 
            ,RECOVERY_DATE::DATE 
            ,RECOVERY_AMOUNT::DOUBLE PRECISION 
            ,RECOVERY_AMOUNT::DOUBLE PRECISION AS TOTAL_RECOVERY 
            ,''TBLU_RECOVERY_MB'' AS SOURCE_TABLE 
            ,''WO_UPLOAD'' AS CREATEDBY 
        FROM TBLU_RECOVERY_MB 
        WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND (DATE_TRUNC(''MONTH'', RECOVERY_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    ---- CONSUMER FINANCE / CF
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT2 || ' 
        (
            DOWNLOAD_DATE 
            ,MASTERID 
            ,ACCOUNT_NUMBER 
            ,ACCOUNT_STATUS 
            ,EXCHANGE_RATE 
            ,CURRENCY 
            ,CUSTOMER_NUMBER 
            ,DATA_SOURCE 
            ,BI_COLLECTABILITY 
            ,OUTSTANDING_WO 
            ,PRODUCT_CODE 
            ,RECOVERY_DATE 
            ,RECOVERY_AMOUNT 
            ,TOTAL_RECOVERY 
            ,SOURCE_TABLE 
            ,CREATEDBY 
        ) SELECT 
            (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE AS DOWNLOAD_DATE 
            ,CONCAT(TRIM(CUSTOMER_NUMBER), ''_'', TRIM(ACCOUNT_NUMBER), ''_'', TRIM(PRODUCT_CODE)) AS MASTERID 
            ,TRIM(ACCOUNT_NUMBER) AS ACCOUNT_NUMBER 
            ,''W'' AS ACCOUNT_STATUS 
            ,1 AS EXCHANGE_RATE 
            ,CURRENCY 
            ,TRIM(CUSTOMER_NUMBER) AS CUSTOMER_NUMBER 
            ,''LOAN'' AS DATA_SOURCE 
            ,5 AS BI_COLLECTABILITY 
            ,NULL AS OUTSTANDING_WO 
            ,TRIM(PRODUCT_CODE) AS PRODUCT_CODE 
            ,RECOVERY_DATE::DATE 
            ,RECOVERY_AMOUNT::DOUBLE PRECISION 
            ,RECOVERY_AMOUNT::DOUBLE PRECISION AS TOTAL_RECOVERY 
            ,''TBLU_RECOVERY_CF'' AS SOURCE_TABLE 
            ,''WO_UPLOAD'' AS CREATEDBY 
        FROM TBLU_RECOVERY_CF 
        WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND (DATE_TRUNC(''MONTH'', RECOVERY_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    ---- JENIUS
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT2 || ' 
        (
            DOWNLOAD_DATE 
            ,MASTERID 
            ,ACCOUNT_NUMBER 
            ,ACCOUNT_STATUS 
            ,EXCHANGE_RATE 
            ,CURRENCY 
            ,CUSTOMER_NUMBER 
            ,DATA_SOURCE 
            ,BI_COLLECTABILITY 
            ,OUTSTANDING_WO 
            ,PRODUCT_CODE 
            ,RECOVERY_DATE 
            ,RECOVERY_AMOUNT 
            ,TOTAL_RECOVERY 
            ,SOURCE_TABLE 
            ,CREATEDBY 
        ) SELECT 
            (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE AS DOWNLOAD_DATE 
            ,CONCAT(TRIM(CUSTOMER_NUMBER), ''_'', TRIM(ACCOUNT_NUMBER), ''_'', TRIM(PRODUCT_CODE)) AS MASTERID 
            ,TRIM(ACCOUNT_NUMBER) AS ACCOUNT_NUMBER 
            ,''W'' AS ACCOUNT_STATUS 
            ,1 AS EXCHANGE_RATE 
            ,CURRENCY 
            ,TRIM(CUSTOMER_NUMBER) AS CUSTOMER_NUMBER 
            ,''LOAN'' AS DATA_SOURCE 
            ,5 AS BI_COLLECTABILITY 
            ,NULL AS OUTSTANDING_WO 
            ,TRIM(PRODUCT_CODE) AS PRODUCT_CODE 
            ,RECOVERY_DATE::DATE 
            ,RECOVERY_AMOUNT::DOUBLE PRECISION 
            ,RECOVERY_AMOUNT::DOUBLE PRECISION AS TOTAL_RECOVERY 
            ,''TBLU_RECOVERY_JENIUS'' AS SOURCE_TABLE 
            ,''WO_UPLOAD'' AS CREATEDBY 
        FROM TBLU_RECOVERY_JENIUS 
        WHERE (DATE_TRUNC(''MONTH'', DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND (DATE_TRUNC(''MONTH'', RECOVERY_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;
    ---- END OF RECOVERY SECTION

    ---- UPDATING IFRS_MASTER_WO AND IFRS_MASTER_WO_RECOVERY PRODUCT_TYPE & PRODUCT_GROUP
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT1 || ' A 
        SET PRODUCT_TYPE = B.PRD_TYPE, PRODUCT_GROUP = B.PRD_GROUP 
        FROM (SELECT * FROM IFRS_MASTER_PRODUCT_PARAM WHERE IS_DELETE = 0) B
        WHERE A.PRODUCT_CODE = B.PRD_CODE 
        AND (DATE_TRUNC(''MONTH'', A.DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A 
        SET PRODUCT_TYPE = B.PRD_TYPE, PRODUCT_GROUP = B.PRD_GROUP 
        FROM (SELECT * FROM IFRS_MASTER_PRODUCT_PARAM WHERE IS_DELETE = 0) B
        WHERE A.PRODUCT_CODE = B.PRD_CODE 
        AND (DATE_TRUNC(''MONTH'', A.DOWNLOAD_DATE::DATE) + INTERVAL ''1 MONTH'' - INTERVAL ''1 DAY'')::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);
    ---- END OF UPDATING IFRS_MASTER_WO AND IFRS_MASTER_WO_RECOVERY PRODUCT_TYPE & PRODUCT_GROUP

    --? CALL OTHER SP, UNCOMMENT IF NEEDED
    -- CALL SP_IFRS_SYNC_RESTRU_SURVIVE (V_CURRDATE);
    -- CALL SP_IFRS_IMP_SYNC_WO_DATA (V_CURRDATE);
    -- CALL SP_IFRS_IMP_SYNC_REC_DATA (V_CURRDATE);

    RAISE NOTICE 'SP_IFRS_IMP_SYNC_WO_UPLOAD | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT1;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_SYNC_WO_UPLOAD';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT1 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;