---- DROP PROCEDURE SP_IFRS_IMP_PD_SCENARIO_DATA_NOLAG;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_PD_SCENARIO_DATA_NOLAG(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_CURRMONTH DATE;
    V_LASTYEARNEXTMONTH DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100);
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLESEGMENT VARCHAR(100);
    
    ---- VARIABLE PROCESS
    V_SEGMENT RECORD;
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT := 'IFRS_PD_SCENARIO_DATA_NOLAG_' || P_RUNID || '';
        V_TABLESEGMENT := 'IFRS_SCENARIO_SEGMENT_GENERATE_QUERY_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT := 'IFRS_PD_SCENARIO_DATA_NOLAG';
        V_TABLESEGMENT := 'IFRS_SCENARIO_SEGMENT_GENERATE_QUERY';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;

    V_CURRMONTH := F_EOMONTH(V_CURRDATE, 0, 'M', 'NEXT');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');

    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN 
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT || ' AS SELECT * FROM IFRS_PD_SCENARIO_DATA_NOLAG WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLESEGMENT || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLESEGMENT || ' AS SELECT * FROM IFRS_SCENARIO_SEGMENT_GENERATE_QUERY WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE TMP_IFRS_PD_SCENARIO_DATA_NOLAG';
    EXECUTE (V_STR_QUERY);

    FOR V_SEGMENT IN 
        EXECUTE 'SELECT 
            A.PKID 
            ,B.SEGMENT 
            ,B.SUB_SEGMENT 
            ,B.GROUP_SEGMENT 
            ,B.CONDITION 
            ,A.IA_FLAG 
        FROM ' || 'IFRS_PD_RULES_CONFIG' || ' A 
        JOIN ' || V_TABLESEGMENT || ' B 
        ON A.SEGMENTATION_ID = B.RULE_ID 
        AND B.SEGMENT_TYPE = ''PD_SEGMENT'' 
        WHERE IS_DELETE = 0 
        AND ACTIVE_FLAG = 1 
        AND A.CUT_OFF_DATE <= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || ''' 
        AND LAG_1MONTH_FLAG = 0 
        ORDER BY PKID '
    LOOP
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'INSERT INTO TMP_IFRS_PD_SCENARIO_DATA_NOLAG 
            (
                DOWNLOAD_DATE 
                ,PD_RULE_ID 
                ,PD_RULE_NAME 
                ,DEFAULT_RULE_ID 
                ,BUCKET_GROUP 
                ,MASTERID 
                ,CUSTOMER_NUMBER 
                ,SEGMENT 
                ,SUB_SEGMENT 
                ,GROUP_SEGMENT 
                ,PD_METHOD 
                ,PD_UNIQUE_ID 
                ,CALC_METHOD 
                ,CALC_AMOUNT 
                ,BUCKET_ID 
                ,OUTSTANDING 
                ,IMPAIRED_FLAG 
                ,DEFAULT_FLAG 
                ,LIFETIME 
                ,FAIR_VALUE_AMOUNT 
                ,BI_COLLECTABILITY 
                ,RATING_CODE 
                ,DAY_PAST_DUE 
                ,DPD_CIF 
                ,CREATEDBY 
                ,CREATEDDATE 
            ) SELECT 
                DOWNLOAD_DATE 
                ,B.PKID AS PD_RULE_ID 
                ,B.TM_RULE_NAME AS PD_RULE_NAME 
                ,B.DEFAULT_RULE_ID 
                ,B.BUCKET_GROUP 
                ,A.MASTERID 
                ,A.CUSTOMER_NUMBER 
                ,''' || V_SEGMENT.SEGMENT || ''' AS SEGMENT 
                ,''' || V_SEGMENT.SUB_SEGMENT || ''' AS SUB_SEGMENT 
                ,''' || V_SEGMENT.GROUP_SEGMENT || ''' AS GROUP_SEGMENT 
                ,PD_METHOD 
                ,CASE WHEN CALC_METHOD IN (''CNOC'', ''COS'', ''CVS'') THEN CUSTOMER_NUMBER ELSE MASTERID END AS PD_UNIQUE_ID 
                ,CALC_METHOD 
                ,0 AS CALC_AMOUNT 
                ,BUCKET_ID 
                ,OUTSTANDING*COALESCE(EXCHANGE_RATE,1) AS OUTSTANDING 
                ,IMPAIRED_FLAG 
                ,DEFAULT_FLAG 
                ,LIFETIME AS LIFETIME 
                ,FAIR_VALUE_AMOUNT*COALESCE(EXCHANGE_RATE,1) AS FAIR_VALUE_AMOUNT 
                ,BI_COLLECTABILITY 
                ,A.RATING_CODE AS RATING_CODE 
                ,DAY_PAST_DUE 
                ,DPD_CIF 
                ,''SYSTEM'' AS CREATEDBY 
                ,CURRENT_TIMESTAMP AS CREATEDDATE 
            FROM ' || V_TABLENAME_MON || ' A 
            JON ' || 'IFRS_PD_RULES_CONFIG' || ' B ON B.PKID = ' || V_SEGMENT.PD_RULE_ID || ' 
            WHERE A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
        V_STR_QUERY := V_STR_QUERY || CASE WHEN V_SEGMENT.GROUP_SEGMENT LIKE '%JENIUS%' THEN ' AND A.CUSTOMER_NUMBER NOT IN (SELECT DISTINCT CUSTOMER_NUMBER FROM IFRS_EXCLUDE_JENIUS)' ELSE '' END;
        V_STR_QUERY := V_STR_QUERY || ' AND ' || V_SEGMENT.CONDITION || ' ';
        EXECUTE (V_STR_QUERY);
        
    END LOOP;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE TMP_IFRS_PD_SCENARIO_DATA_NOLAG 
        SET BUCKET_ID = E.BUCKET_ID 
        ,BUCKET_ID_ORIG = E.BUCKET_ID 
        FROM TMP_IFRS_PD_SCENARIO_DATA_NOLAG A
        JOIN IFRS_BUCKET_HEADER C 
        ON A.BUCKET_GROUP = C.BUCKET_GROUP 
        AND C.IS_DELETE = 0 
        JOIN IFRS_BUCKET_DETAIL E 
        ON A.BUCKET_GROUP = E.BUCKET_GROUP  
        AND E.IS_DELETE = 0 
        AND ((CASE 
        WHEN C.OPTION_GROUPING = ''DPD'' THEN A.DAY_PAST_DUE 
        WHEN C.OPTION_GROUPING = ''DPD_CIF'' THEN A.DPD_CIF 
        WHEN C.OPTION_GROUPING = ''BIC'' THEN A.BI_COLLECTABILITY
        END) BETWEEN E.RANGE_START AND E.RANGE_END 
        OR (C.OPTION_GROUPING IN (''IR'') 
            AND E.SUB_BUCKET_GROUP = A.RATING_CODE)
        ) ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE TMP_IFRS_PD_SCENARIO_DATA_NOLAG 
        SET 
            DEFAULT_FLAG = CASE WHEN B.MASTERID IS NOT NULL THEN 1 ELSE 0 END 
            ,BUCKET_ID = CASE WHEN B.MASTERID IS NOT NULL THEN C.MAX_BUCKET ELSE A.BUCKET_ID END 
            ,BUCKET_ID_ORIG = CASE WHEN B.MASTERID IS NOT NULL THEN C.MAX_BUCKET ELSE A.BUCKET_ID END 
        FROM TMP_IFRS_PD_SCENARIO_DATA_NOLAG A 
        JOIN ( 
            SELECT * 
            FROM IFRS_DEFAULT_NOLAG 
            WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        ) B 
        ON A.DEFAULT_RULE_ID = B.RULE_ID 
        AND A.MASTERID = B.MASTERID 
        JOIN (
            SELECT BUCKET_GROUP, MAX(BUCKET_ID) AS MAX_BUCKET 
            FROM IFRS_BUCKET_DETAIL 
            GROUP BY BUCKET_GROUP 
        ) C 
        ON C.BUCKET_GROUP = A.BUCKET_GROUP ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT || ' A 
        USING ' || 'IFRS_PD_RULES_CONFIG' || ' B 
        WHERE A.PD_RULE_ID = B.PKID 
        AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND B.ACTIVE_FLAG = 1 AND B.IS_DELETE = 0 ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT || ' 
        SELECT * 
        FROM TMP_IFRS_PD_SCENARIO_DATA_NOLAG ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT || ' 
        SET NEXT_12M_DEFAULT_FLAG = B.MAX_DEFAULT_FLAG 
        FROM ' || V_TABLEINSERT || ' A 
        JOIN ( 
            SELECT PD_UNIQUE_ID, PD_RULE_ID, MAX(CASE WHEN DEFAULT_FLAG = 1 THEN 1 ELSE 0 END) AS MAX_DEFAULT_FLAG 
            FROM ' || V_TABLEINSERT || ' 
            WHERE DOWNLOAD_DATE BETWEEN ''' || CAST(V_LASTYEARNEXTMONTH AS VARCHAR(10)) || '''::DATE AND ''' || CAST(V_CURRMONTH AS VARCHAR(10)) || '''::DATE 
            GROUP BY PD_UNIQUE_ID, PD_RULE_ID 
        ) B 
        ON A.PD_RULE_ID = B.PD_RULE_ID 
        AND A.PD_UNIQUE_ID = B.PD_UNIQUE_ID 
        JOIN ' || 'IFRS_PD_RULES_CONFIG' || ' C 
        ON A.PD_RULE_ID = C.PKID 
        WHERE A.DOWNLOAD_DATE = ''' || CAST(V_LASTYEAR AS VARCHAR(10)) || '''::DATE 
        AND C.ACTIVE_FLAG = 1 
        AND C.IS_DELETE = 0 ';
    EXECUTE (V_STR_QUERY);

    -- RAISE NOTICE '---> %', V_STR_QUERY;

    RAISE NOTICE 'SP_IFRS_IMP_PD_SCENARIO_DATA_NOLAG | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_PD_SCENARIO_DATA_NOLAG';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;