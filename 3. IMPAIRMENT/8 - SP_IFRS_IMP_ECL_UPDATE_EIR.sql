---- DROP PROCEDURE SP_IFRS_IMP_ECL_UPDATE_EIR;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_ECL_UPDATE_EIR(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_CURRMONTH DATE;
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;
    V_STARTDATEOFYEAR DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100);
    V_TABLEINSERT VARCHAR(100);

    ---- VARIABLE PROCESS
    V_RECORD RECORD;
    V_EXCEPT_ID VARCHAR(10);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLEINSERT := 'IFRS_SCENARIO_SEGMENT_GENERATE_QUERY_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLEINSERT := 'IFRS_SCENARIO_SEGMENT_GENERATE_QUERY';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;
    
    V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    V_CURRMONTH := F_EOMONTH(V_CURRDATE, 0, 'M', 'NEXT');
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    V_STARTDATEOFYEAR := (DATE_PART('YEAR', V_CURRDATE) || '-01-01')::DATE;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------
    
    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || '
        UPDATE ' || V_TABLENAME || ' A
        SET EIR_SEGMENT = NULL
        WHERE A.DOWNLOAD_DATE = ''' || V_CURRDATE || '''';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    FOR V_RECORD IN 
        EXECUTE 'SELECT DISTINCT
            TABLE_NAME
            ,SUB_SEGMENT
            ,CONDITION
        FROM ' || V_TABLEINSERT || '
        WHERE SEGMENT_TYPE = ''EIR_SEGMENT'''
    LOOP
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || '
            UPDATE ' || CASE WHEN P_PRC = 'S' THEN V_TABLENAME ELSE V_RECORD.TABLE_NAME END || ' A
            SET EIR_SEGMENT = ''' || V_RECORD.SUB_SEGMENT || '''
            WHERE (' || REPLACE(V_RECORD.CONDITION, '"', '') || ') 
            AND A.DOWNLOAD_DATE = ''' || V_CURRDATE || '''';
        EXECUTE (V_STR_QUERY);
        
        GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
        V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
        V_RETURNROWS := 0;
    END LOOP;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || '
        UPDATE ' || V_TABLENAME || ' A
        SET EIR_SEGMENT = B.EIR_SEGMENT
        FROM (
            SELECT PRODUCT_TYPE, EIR_SEGMENT
            FROM ' || V_TABLENAME || '
            WHERE DOWNLOAD_DATE = ''' || V_CURRDATE || ''' AND DATA_SOURCE = ''LOAN''
            GROUP BY PRODUCT_TYPE, EIR_SEGMENT
        ) B
        WHERE A.PRODUCT_TYPE = B.PRODUCT_TYPE
        AND A.DOWNLOAD_DATE = ''' || V_CURRDATE || ''' AND DATA_SOURCE = ''LIMIT''';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    RAISE NOTICE 'SP_IFRS_IMP_ECL_UPDATE_EIR | AFFECTED RECORD : %', V_RETURNROWS2;
    -------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLENAME;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_ECL_UPDATE_EIR';
    V_OPERATION = 'UPDATE';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLENAME || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;