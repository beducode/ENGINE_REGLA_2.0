---- DROP PROCEDURE SP_IFRS_IMP_PD_CHR_RESULT;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_PD_CHR_RESULT(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100); 
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLEPDCONFIG VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- VARIABLE PROCESS
    V_BUCKET_GROUP VARCHAR(100);        
    V_PD_RULE_ID INT;         
    V_SEQ_YEAR INT; 

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV_' || P_RUNID || '';
        V_TABLEINSERT4 := 'IFRS_PD_CHR_RESULT_YEARLY_' || P_RUNID || '';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV';
        V_TABLEINSERT4 := 'IFRS_PD_CHR_RESULT_YEARLY';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG';
    END IF;


    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;
    
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT4 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT4 || ' AS SELECT * FROM IFRS_PD_CHR_RESULT_YEARLY WHERE 0=1';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======
    
    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS TOTAL_COUNT_BUCKET_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE TOTAL_COUNT_BUCKET_' || P_RUNID || ' AS 
    SELECT PD_RULE_ID, BUCKET_ID, SUM(TOTAL_COUNT) AS TOTAL_COUNT_ALL 
    FROM IFRS_PD_CHR_SUMM A        
    INNER JOIN ' || V_TABLEPDCONFIG || ' B ON A.PD_RULE_ID = B.PKID AND B.IS_DELETE = 0 AND B.ACTIVE_FLAG= 1        
    WHERE A.PROJECTION_DATE <= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND SEQ_YEAR = 1          
    AND A.DOWNLOAD_DATE >= F_EOMONTH(''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE, B.HISTORICAL_DATA, ''M'', ''PREV'')              
    GROUP BY PD_RULE_ID, BUCKET_ID ORDER BY PD_RULE_ID, BUCKET_ID';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT4 || ' A 
    USING ' || V_TABLEPDCONFIG || ' B WHERE A.PD_RULE_ID = B.PKID 
    AND PROJECTION_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND B.IS_DELETE = 0 AND B.ACTIVE_FLAG= 1';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT4 || '              
    (              
    DOWNLOAD_DATE              
    ,PROJECTION_DATE              
    ,PD_RULE_ID              
    ,PD_RULE_NAME              
    ,SEGMENT              
    ,CALC_METHOD              
    ,BUCKET_GROUP              
    ,BUCKET_ID              
    ,BUCKET_NAME              
    ,SEQ_YEAR              
    ,CUMULATIVE_PD_RATE              
    ,MARGINAL_PD_RATE              
    )              
    SELECT               
    F_EOMONTH(''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE, B.INCREMENT_PERIOD, ''M'', ''PREV'') AS DOWNLOAD_DATE              
    ,''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AS PROJECTION_DATE              
    ,A.PD_RULE_ID              
    ,MAX(PD_RULE_NAME) AS PD_RULE_NAME              
    ,MAX(SEGMENT) AS SEGMENT              
    ,MAX(A.CALC_METHOD)              
    ,MAX(A.BUCKET_GROUP)              
    ,A.BUCKET_ID              
    ,MAX(BUCKET_NAME)
    ,(EXTRACT(MONTH FROM AGE(DOWNLOAD_DATE, PROJECTION_DATE))/B.INCREMENT_PERIOD)::INT AS SEQ_YEAR
    ,NULL AS CUMULATIVE_PD_RATE              
    ,CAST(SUM(MARGINAL_DEFAULT_COUNT) AS DOUBLE PRECISION)/CAST(MAX(C.TOTAL_COUNT_ALL) AS DOUBLE PRECISION) AS MARGINAL_PD_RATE               
    FROM IFRS_PD_CHR_SUMM A               
    INNER JOIN ' || V_TABLEPDCONFIG || ' B  ON A.PD_RULE_ID = B.PKID              
    LEFT JOIN TOTAL_COUNT_BUCKET_' || P_RUNID || ' C ON A.PD_RULE_ID = C.PD_RULE_ID  AND A.BUCKET_ID = C.BUCKET_ID              
    WHERE A.DOWNLOAD_DATE <= F_EOMONTH(''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE, B.INCREMENT_PERIOD, ''M'', ''PREV'') 
    AND A.PROJECTION_DATE <= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND A.DOWNLOAD_DATE >= B.CUT_OFF_DATE         
    AND A.DOWNLOAD_DATE >= F_EOMONTH(''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE, B.HISTORICAL_DATA, ''M'', ''PREV'')        
    AND B.IS_DELETE = 0 AND B.ACTIVE_FLAG= 1      
    GROUP BY A.PD_RULE_ID,(EXTRACT(MONTH FROM AGE(DOWNLOAD_DATE, PROJECTION_DATE))/B.INCREMENT_PERIOD)::INT,A.BUCKET_ID, B.INCREMENT_PERIOD             
    ORDER BY A.PD_RULE_ID,(EXTRACT(MONTH FROM AGE(DOWNLOAD_DATE, PROJECTION_DATE))/B.INCREMENT_PERIOD)::INT,A.BUCKET_ID';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS CHR_MASTER_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE CHR_MASTER_' || P_RUNID || ' AS
    SELECT A.* FROM ' || V_TABLEINSERT4 || ' A
    INNER JOIN ' || V_TABLEPDCONFIG || ' B  ON A.PD_RULE_ID = B.PKID              
    WHERE PROJECTION_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND B.IS_DELETE = 0 AND B.ACTIVE_FLAG= 1';
    EXECUTE (V_STR_QUERY);

    FOR V_PD_RULE_ID, V_BUCKET_GROUP, V_SEQ_YEAR IN
        EXECUTE 'SELECT DISTINCT PD_RULE_ID, BUCKET_GROUP, SEQ_YEAR FROM CHR_MASTER_' || P_RUNID || ''
    LOOP

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS BUCKET_CHR_' || P_RUNID || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE BUCKET_CHR_' || P_RUNID || ' AS 
        SELECT * FROM CHR_MASTER_' || P_RUNID || ' WHERE PD_RULE_ID = ' || V_PD_RULE_ID || ' AND SEQ_YEAR  = ' || V_SEQ_YEAR || ' AND BUCKET_GROUP = ''' || V_BUCKET_GROUP || '''';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS BUCKET_FULL_' || P_RUNID || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE BUCKET_FULL_' || P_RUNID || ' AS 
        SELECT * FROM IFRS_BUCKET_DETAIL WHERE IS_DELETE = 0 AND ACTIVE_FLAG = 1 AND BUCKET_GROUP = ''' || V_BUCKET_GROUP || '''';
        EXECUTE (V_STR_QUERY);
        
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT4 || ' (DOWNLOAD_DATE        
        ,PROJECTION_DATE        
        ,PD_RULE_ID        
        ,PD_RULE_NAME        
        ,SEGMENT        
        ,CALC_METHOD        
        ,BUCKET_GROUP        
        ,BUCKET_ID        
        ,BUCKET_NAME        
        ,SEQ_YEAR        
        ,CUMULATIVE_PD_RATE        
        ,MARGINAL_PD_RATE)        
        SELECT        
        F_EOMONTH(''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE, C.INCREMENT_PERIOD, ''M'', ''PREV'') AS DOWNLOAD_DATE        
        ,''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AS PROJECTION_DATE        
        ,' || V_PD_RULE_ID || ' AS PD_RULE_ID        
        ,C.TM_RULE_NAME AS PD_RULE_NAME        
        ,D.SEGMENT AS SEGMENT        
        ,C.CALC_METHOD        
        ,A.BUCKET_GROUP        
        ,A.BUCKET_ID        
        ,A.BUCKET_NAME        
        ,' || V_SEQ_YEAR || ' AS SEQ_YEAR        
        ,0 AS CUMULATIVE_PD_RATE        
        ,0 AS MARGINAL_PD_RATE         
        FROM BUCKET_FULL_' || P_RUNID || ' A         
        LEFT JOIN BUCKET_CHR_' || P_RUNID || ' B         
        ON A.BUCKET_ID = B.BUCKET_ID        
        INNER JOIN ' || V_TABLEPDCONFIG || ' C ON A.BUCKET_GROUP = C.BUCKET_GROUP AND C.PKID = ' || V_PD_RULE_ID || '        
        INNER JOIN IFRS_MSTR_SEGMENT_RULES_HEADER D ON C.SEGMENTATION_ID = D.PKID AND D.IS_DELETE = 0        
        WHERE B.BUCKET_ID IS NULL';
        EXECUTE (V_STR_QUERY);

        GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
        V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
        V_RETURNROWS := 0;

    END LOOP;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS CUMULATIVE_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS CUMULATIVE_PD_RESULT_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE CUMULATIVE_' || P_RUNID || ' AS 
    SELECT A.* FROM ' || V_TABLEINSERT4 || ' A
    INNER JOIN ' || V_TABLEPDCONFIG || ' B  ON A.PD_RULE_ID = B.PKID              
    WHERE PROJECTION_DATE= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE              
    AND B.IS_DELETE = 0 AND B.ACTIVE_FLAG = 1';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE CUMULATIVE_PD_RESULT_' || P_RUNID || ' AS 
    SELECT A.PD_RULE_ID, A.DOWNLOAD_DATE, A.BUCKET_ID,MAX(A.MARGINAL_PD_RATE) AS MARGINAL_PD_RATE,A.SEQ_YEAR,SUM(B.MARGINAL_PD_RATE) AS CUMULATIVE_PD_RATE 
    FROM ' || V_TABLEINSERT4 || '  A 
    LEFT JOIN  CUMULATIVE_' || P_RUNID || ' B ON A.DOWNLOAD_DATE = B.DOWNLOAD_DATE  AND A.PD_RULE_ID = B.PD_RULE_ID                
    AND A.BUCKET_ID = B.BUCKET_ID AND B.SEQ_YEAR <= A.SEQ_YEAR              
    WHERE A.PROJECTION_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE              
    GROUP BY A.PD_RULE_ID, A.DOWNLOAD_DATE, A.BUCKET_ID,A.SEQ_YEAR              
    ORDER BY A.PD_RULE_ID,A.DOWNLOAD_DATE,A.BUCKET_ID,A.SEQ_YEAR';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || ' A              
    SET CUMULATIVE_PD_RATE = B.CUMULATIVE_PD_RATE              
    FROM CUMULATIVE_PD_RESULT_' || P_RUNID || ' B 
    WHERE A.PD_RULE_ID = B.PD_RULE_ID AND A.DOWNLOAD_DATE = B.DOWNLOAD_DATE AND A.SEQ_YEAR = B.SEQ_YEAR AND A.BUCKET_ID= B.BUCKET_ID              
    AND A.PROJECTION_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || ' A        
    SET MARGINAL_PD_RATE = 0, 
    CUMULATIVE_PD_RATE = 0        
    FROM ' || V_TABLEPDCONFIG || ' B 
    WHERE A.PD_RULE_ID = B.PKID AND PROJECTION_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND BUCKET_ID = 0';
    EXECUTE (V_STR_QUERY);

    RAISE NOTICE 'SP_IFRS_IMP_PD_CHR_RESULT | AFFECTED RECORD : %', V_RETURNROWS2;
    -------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT4;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_PD_CHR_RESULT';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT4 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

    CALL SP_IFRS_IMP_PD_CHR_GAMMA_DIST(P_RUNID, V_CURRDATE, P_PRC);

END;

$$;