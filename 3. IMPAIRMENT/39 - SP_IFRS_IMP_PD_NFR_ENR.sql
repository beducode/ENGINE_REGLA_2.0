---- DROP PROCEDURE SP_IFRS_IMP_PD_NFR_ENR;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_PD_NFR_ENR(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100); 
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLEPDCONFIG VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- VARIABLE PROCESS
    V_MAX_YEAR INT;            
    V_MIN_YEAR INT;           
    V_COUNT_MIN INT = 1;             
    V_COUNT_MAX INT = 12;  

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;

    V_BUCKET_GROUP VARCHAR(100);
    V_PD_RULE_ID INT ;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'IFRS_PD_NFR_ENR';
        V_TABLEINSERT2 := 'IFRS_PD_SCENARIO_DATA';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT1 := 'IFRS_PD_NFR_ENR';
        V_TABLEINSERT2 := 'IFRS_PD_SCENARIO_DATA';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG';
    END IF;


    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;
    
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------
    
    -------- ====== BODY ======

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT1 || ' WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
    (DOWNLOAD_DATE
    ,PD_RULE_ID
    ,PD_RULE_NAME
    ,BUCKET_GROUP
    ,BUCKET_ID
    ,CALC_AMOUNT
    ,CALC_METHOD
    ,CREATEDBY
    ,CREATEDDATE)
    SELECT DOWNLOAD_DATE
    ,PD_RULE_ID
    ,MAX(PD_RULE_NAME) AS PD_RULE_NAME
    ,MAX(BUCKET_GROUP) AS BUCKET_GROUP
    ,BUCKET_ID
    ,CASE WHEN MAX(CALC_METHOD) IN (''AOS'',''COS'') THEN SUM(CALC_AMOUNT) ELSE COUNT(1) END AS CALC_AMOUNT
    ,MAX(CALC_METHOD) AS CALC_METHOD
    ,MAX(CREATEDBY) AS CREATEDBY
    ,CURRENT_TIMESTAMP AS CREATEDDATE  
    FROM 
    (SELECT DOWNLOAD_DATE
    ,PD_RULE_ID
    ,PD_UNIQUE_ID
    ,MAX(PD_RULE_NAME) AS PD_RULE_NAME
    ,MAX(A.BUCKET_GROUP) AS BUCKET_GROUP
    ,MAX(BUCKET_ID) AS BUCKET_ID
    ,CASE WHEN MAX(A.CALC_METHOD) IN (''COS'',''AOS'') THEN SUM(A.OUTSTANDING) ELSE 1 END AS CALC_AMOUNT
    ,MAX(A.CALC_METHOD) AS CALC_METHOD
    ,''SP_IFRS_IMP_PD_NFR_ENR''  AS CREATEDBY
    ,CURRENT_TIMESTAMP AS CREATEDDATE 
    FROM ' || V_TABLEINSERT2 || '  A 
    INNER JOIN ' || V_TABLEPDCONFIG || ' B ON A.PD_RULE_ID = B.PKID 
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND B.PD_METHOD = ''NFR'' AND B.CUT_OFF_DATE <= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
    GROUP BY DOWNLOAD_DATE, PD_RULE_ID, A.PD_UNIQUE_ID
    ) X 
    GROUP BY DOWNLOAD_DATE,PD_RULE_ID,BUCKET_ID';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS CURR_ENR_NFR_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE CURR_ENR_NFR_' || P_RUNID || ' AS SELECT * FROM ' || V_TABLEINSERT1 || ' 
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    FOR V_BUCKET_GROUP, V_PD_RULE_ID IN 
    EXECUTE 'SELECT DISTINCT PD_RULE_ID, BUCKET_GROUP FROM CURR_ENR_NFR_' || P_RUNID || ''
    LOOP
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS NOT_FOUND_' || P_RUNID || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE NOT_FOUND_' || P_RUNID || ' AS SELECT A.BUCKET_GROUP, A.BUCKET_ID 
        FROM IFRS_BUCKET_DETAIL A 
        LEFT JOIN CURR_ENR_NFR_' || P_RUNID || ' B ON A.BUCKET_GROUP  = B.BUCKET_GROUP AND A.BUCKET_ID = B.BUCKET_ID AND B.PD_RULE_ID = ' || V_PD_RULE_ID || '
        WHERE A.BUCKET_GROUP =''' || V_BUCKET_GROUP || ''' AND B.BUCKET_ID IS NULL';
        EXECUTE (V_STR_QUERY);


        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
        (DOWNLOAD_DATE
        ,PD_RULE_ID
        ,PD_RULE_NAME
        ,BUCKET_GROUP
        ,BUCKET_ID
        ,CALC_AMOUNT
        ,CALC_METHOD
        ,CREATEDBY
        ,CREATEDDATE)
        SELECT ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AS DOWNLOAD_DATE
        ,A.PKID AS PD_RULE_ID
        ,A.TM_RULE_NAME AS PD_RULE_NAME
        ,A.BUCKET_GROUP
        ,B.BUCKET_ID
        ,0 AS CALC_AMOUNT
        ,A.CALC_METHOD
        ,''SP_IFRS_IMP_PD_NFR_ENR'' AS CREATEDBY
        ,CURRENT_TIMESTAMP AS CREATEDDATE
        FROM ' || V_TABLEPDCONFIG || ' A INNER JOIN NOT_FOUND_' || P_RUNID || ' B ON A.BUCKET_GROUP = B.BUCKET_GROUP  
        WHERE A.PKID = ' || V_PD_RULE_ID || ' ';
        EXECUTE (V_STR_QUERY);

    END LOOP;

    RAISE NOTICE 'SP_IFRS_IMP_PD_NFR_ENR | AFFECTED RECORD : %', V_RETURNROWS2;
    -------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT1;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_PD_NFR_ENR';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT1 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

    CALL SP_IFRS_IMP_PD_NFR_FLOWRATE(P_RUNID, V_CURRDATE, P_PRC);
    CALL SP_IFRS_IMP_PD_NFR_FLOWLOSS(P_RUNID, V_CURRDATE, P_PRC);
    CALL SP_IFRS_IMP_PD_NFR_RESULT(P_RUNID, V_CURRDATE, P_PRC);


END;

$$;