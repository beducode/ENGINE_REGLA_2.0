---- DROP PROCEDURE SP_IFRS_IMP_DASHBOARD_DATA;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_DASHBOARD_DATA(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_PREVMONTH DATE;
    V_CURRMONTH DATE;
    V_LASTYEARNEXTMONTH DATE;
    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100);
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'IFRS_IMP_MAIN_DASHBOARD_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT1 := 'IFRS_IMP_MAIN_DASHBOARD';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;

    V_CURRMONTH := F_EOMONTH(V_CURRDATE, 0, 'M', 'NEXT');
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT1 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT1 || ' AS SELECT * FROM IFRS_IMP_MAIN_DASHBOARD WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT1 || ' 
        WHERE DATA_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
        (  
            DATA_DATE
            ,SEGMENT
            ,STAGE
            ,BRANCH
            ,CURRENCY
            ,CA_ECL_AMT_IDR
            ,IA_ECL_AMT_IDR
            ,ECL_AMT_IDR
            ,CA_UNWINDING_AMT_IDR
            ,IA_UNWINDING_AMT_IDR
            ,UNWINDING_AMT_IDR  
        ) SELECT 
            A.DOWNLOAD_DATE AS DATA_DATE
            ,SEGMENT AS SEGMENT
            ,STAGE AS STAGE
            ,REGION_DESC AS BRANCH
            ,CURRENCY AS CURRENCY
            ,SUM(COALESCE(CASE WHEN IMPAIRED_FLAG=''C'' THEN ECL_AMOUNT ELSE 0 END,0)*COALESCE(EXCHANGE_RATE,1)) AS CA_ECL_AMT_IDR
            ,SUM(COALESCE(CASE WHEN IMPAIRED_FLAG=''I'' THEN ECL_AMOUNT ELSE 0 END,0)*COALESCE(EXCHANGE_RATE,1)) AS IA_ECL_AMT_IDR
            ,SUM(COALESCE(ECL_AMOUNT,0)*COALESCE(EXCHANGE_RATE,1)) AS ECL_AMT_IDR
            ,SUM((COALESCE(CA_UNWINDING_AMOUNT,0))*COALESCE(EXCHANGE_RATE,1)) AS CA_UNWINDING_AMT_IDR
            ,SUM((COALESCE(IA_UNWINDING_AMOUNT,0))*COALESCE(EXCHANGE_RATE,1)) AS IA_UNWINDING_AMT_IDR
            ,SUM((COALESCE(CA_UNWINDING_AMOUNT,0)+COALESCE(IA_UNWINDING_AMOUNT,0))*COALESCE(EXCHANGE_RATE,1)) AS UNWINDING_AMT_IDR  
        FROM ' || V_TABLENAME_MON || ' A  
        LEFT JOIN (SELECT DISTINCT BRANCH_CODE, REGION_DESC FROM IFRS_MASTER_BRANCH) B ON A.BRANCH_CODE=B.BRANCH_CODE  
        WHERE A.DOWNLOAD_DATE=''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE   
        AND ACCOUNT_STATUS=''A''  
        GROUP BY 
            A.DOWNLOAD_DATE
            ,SEGMENT
            ,STAGE
            ,REGION_DESC
            ,CURRENCY ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    RAISE NOTICE 'SP_IFRS_IMP_DASHBOARD_DATA | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT1;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_DASHBOARD_DATA';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT1 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;