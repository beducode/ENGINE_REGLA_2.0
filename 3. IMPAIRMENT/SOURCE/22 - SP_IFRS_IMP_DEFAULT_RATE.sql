---- DROP PROCEDURE SP_IFRS_IMP_DEFAULT_RATE;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_DEFAULT_RATE(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100); 
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLEPDCONFIG VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV_' || P_RUNID || '';
        V_TABLEINSERT4 := 'IFRS_IMP_DEFAULT_RATE_' || P_RUNID || '';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV';
        V_TABLEINSERT4 := 'IFRS_IMP_DEFAULT_RATE';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG';
    END IF;

    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;

    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');

    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT4 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT4 || ' AS SELECT * FROM IFRS_IMP_DEFAULT_RATE WHERE 0=1';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======
    
    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS MAX_BUCKET_' || P_RUNID || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE MAX_BUCKET_' || P_RUNID || ' AS 
    SELECT BUCKET_GROUP, MAX(BUCKET_ID) AS MAX_BUCKET FROM IFRS_BUCKET_DETAIL GROUP BY BUCKET_GROUP';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT4 || ' 
    WHERE DOWNLOAD_DATE = ''' || CAST(V_LASTYEAR AS VARCHAR(10)) || '''::DATE
    AND CREATEDBY = ''SP_IFRS_IMP_DEFAULT_RATE''';
    EXECUTE (V_STR_QUERY);    


    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT4 || ' (DOWNLOAD_DATE          
    ,PROJECTION_DATE          
    ,PD_RULE_ID          
    ,PD_RULE_NAME          
    ,SEGMENT          
    ,CALC_METHOD          
    ,TOTAL_ACCOUNT          
    ,TOTAL_PERFORMING          
    ,TOTAL_12M_DEFAULT          
    ,TOTAL_OS          
    ,TOTAL_OS_PERFORMING          
    ,TOTAL_OS_12M_DEFAULT          
    ,ODR_RATE          
    ,CREATEDBY          
    ,CREATEDDATE)          
    SELECT DOWNLOAD_DATE          
    ,''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AS PROJECTION_DATE          
    ,PD_RULE_ID          
    ,MAX(PD_RULE_NAME)          
    ,MAX(SEGMENT)          
    ,MAX(A.CALC_METHOD)          
    ,COUNT(1) AS TOTAL_ACCOUNT          
    ,SUM(CASE WHEN BUCKET_ID = 0 OR BUCKET_ID = B.MAX_BUCKET THEN 0 ELSE 1 END)  TOTAL_PERFORMING          
    ,SUM (CASE WHEN NEXT_12M_DEFAULT_FLAG = 1 AND A.BUCKET_ID <> MAX_BUCKET AND BUCKET_ID <> 0  THEN 1  ELSE 0 END)  AS TOTAL_12M_DEFAULT          
    ,SUM (OUTSTANDING) TOTAL_OS          
    ,SUM(CASE WHEN BUCKET_ID = 0 OR BUCKET_ID = B.MAX_BUCKET  THEN 0 ELSE A.OUTSTANDING END) TOTAL_OS_PERFORMING          
    ,SUM (CASE WHEN NEXT_12M_DEFAULT_FLAG = 1 AND A.BUCKET_ID <> MAX_BUCKET  AND BUCKET_ID <> 0  THEN A.OUTSTANDING ELSE 0 END) AS TOTAL_OS_12M_DEFAULT          
    ,NULL AS ODR_RATE          
    ,''SP_IFRS_IMP_DEFAULT_RATE'' AS CREATEDBY          
    ,CURRENT_DATE AS  CREATEDDATE           
    FROM IFRS_PD_SCENARIO_DATA A          
    INNER JOIN MAX_BUCKET_' || P_RUNID || ' B ON A.BUCKET_GROUP = B.BUCKET_GROUP          
    WHERE DOWNLOAD_DATE = ''' || CAST(V_LASTYEAR AS VARCHAR(10)) || '''::DATE          
    GROUP BY DOWNLOAD_DATE,PD_RULE_ID';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || ' A          
    SET ODR_RATE = CASE WHEN TOTAL_PERFORMING = 0 THEN 0 ELSE CAST(TOTAL_12M_DEFAULT AS DOUBLE PRECISION)/CAST(TOTAL_PERFORMING AS DOUBLE PRECISION) END   
    FROM ' || V_TABLEPDCONFIG || ' B 
    WHERE A.DOWNLOAD_DATE = ''' || CAST(V_LASTYEAR AS VARCHAR(10)) || '''::DATE AND A.CREATEDBY = ''SP_IFRS_IMP_DEFAULT_RATE'' 
    AND A.PD_RULE_ID = B.PKID';
    EXECUTE (V_STR_QUERY);

    RAISE NOTICE 'SP_IFRS_IMP_DEFAULT_RATE | AFFECTED RECORD : %', V_RETURNROWS2;
    -------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT4;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_DEFAULT_RATE';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT4 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

    --- NO LAG
    CALL SP_IFRS_IMP_DEFAULT_RATE_NOLAG(P_RUNID, V_CURRDATE, P_PRC);

END;

$$;