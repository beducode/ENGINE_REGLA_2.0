---- DROP PROCEDURE SP_IFRS_SYNC_TREASURY;

CREATE OR REPLACE PROCEDURE SP_IFRS_SYNC_TREASURY(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL 
AS $$
DECLARE
    ---- DATE
    V_CURRMONTH DATE;
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;
    V_STARTDATEOFYEAR DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100); 
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLEINSERT8 VARCHAR(100);
    V_TABLEINSERT9 VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
    V_CHECKROWS INT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLEINSERT1 := 'IFRS_MASTER_TREASURY_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_JUDGEMENT_RATING_TREASURY_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_MASTER_EXTERNAL_RATING_' || P_RUNID || '';
        V_TABLEINSERT4 := 'XXX_' || P_RUNID || '';
        V_TABLEINSERT5 := 'XXX_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLEINSERT1 := 'IFRS_MASTER_TREASURY';
        V_TABLEINSERT2 := 'IFRS_JUDGEMENT_RATING_TREASURY';
        V_TABLEINSERT3 := 'IFRS_MASTER_EXTERNAL_RATING';
        V_TABLEINSERT4 := 'XXX';
        V_TABLEINSERT5 := 'XXX';
    END IF;

    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;
    
    V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    V_CURRMONTH := F_EOMONTH(V_CURRDATE, 0, 'M', 'NEXT');
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    V_STARTDATEOFYEAR := (DATE_PART('YEAR', V_CURRDATE) || '-01-01')::DATE;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    ----- MAIN LOGIC -----

    ----------------------------      
    ---- TBLU_DATA_TREASURY ----      
    ----------------------------  
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT1 || ' 
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND SOURCE_SYSTEM = ''TRSUPL'' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT2 || ' 
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT2 || '      
    (      
    DOWNLOAD_DATE      
    ,MASTERID      
    ,EXTERNAL_RATING_AGENCY      
    ,EXTERNAL_RATING_CODE      
    ,EXTERNAL_RATING_INITIAL      
    )      
    SELECT      
    DOWNLOAD_DATE::DATE      
    ,DEAL_NO      
    ,EXTERNAL_RATING_AGENCY      
    ,EXTERNAL_RATING_CODE      
    ,EXTERNAL_RATING_INITIAL      
    FROM TBLU_JUDGEMENT_RATING_TREASURY      
    WHERE F_EOMONTH(DOWNLOAD_DATE::DATE, 0, ''M'', ''NEXT'') = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || ''' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || ' INSERT INTO ' || V_TABLEINSERT1 || '      
    (      
    DOWNLOAD_DATE      
    ,DATA_SOURCE      
    ,ACCOUNT_NUMBER      
    ,PRODUCT_CODE      
    ,PRODUCT_TYPE      
    ,PRODUCT_GROUP      
    ,BRANCH_CODE      
    ,CUSTOMER_NUMBER      
    ,CUSTOMER_NAME      
    ,SANDI_BANK      
    ,CURRENCY      
    ,EXCHANGE_RATE      
    ,OUTSTANDING      
    ,LOAN_START_DATE      
    ,LOAN_DUE_DATE      
    ,INTEREST_RATE      
    ,INTEREST_ACCRUED      
    ,EXT_RATING_AGENCY      
    ,EXT_RATING_CODE      
    ,EXT_INIT_RATING_CODE      
    ,INTEREST_TYPE      
    ,FAIR_VALUE_AMOUNT      
    ,PAYMENT_TERM      
    ,INTEREST_CALCULATION_CODE      
    ,SOVEREIGN_FLAG      
    ,LAST_PAYMENT_DATE      
    ,NEXT_PAYMENT_DATE      
    ,ISIN_CODE      
    ,INV_TYPE      
    ,BI_COLLECTABILITY      
    ,UNAMORT_DISCOUNT_PREMIUM      
    ,DISCOUNT_PREMIUM_AMOUNT      
    ,SOURCE_SYSTEM      
    )      
    SELECT       
    A.DOWNLOAD_DATE::DATE      
    ,COALESCE(B.DATA_SOURCE, ''TRS'')      
    ,DEAL_NO AS ACCOUNT_NUMBER      
    ,PRODUCT_CODE      
    ,PRD_TYPE AS PRODUCT_TYPE      
    ,PRD_GROUP AS PRODUCT_GROUP      
    ,''0800'' AS BRANCH_CODE      
    ,CUSTOMER_NUMBER      
    ,CUSTOMER_NAME      
    ,A.SANDI_BANK      
    ,A.CURRENCY      
    ,C.RATE_AMOUNT AS EXCHANGE_RATE      
    ,NOTIONAL_AMOUNT_ORIGINAL_CCY::NUMERIC AS OUTSTANDING      
    ,START_DATE::DATE AS LOAN_START_DATE      
    ,MAT_DATE::DATE AS LOAN_DUE_DATE      
    ,INTEREST_RATE::REAL AS INTEREST_RATE      
    ,INTEREST_RECEIVABLE_CCY::NUMERIC AS INTEREST_ACCRUED      
    ,A.EXTERNAL_RATING_AGENCY AS EXT_RATING_AGENCY      
    ,A.EXTERNAL_RATING AS EXT_RATING_CODE      
    ,A.EXTERNAL_RATING_INITIAL AS EXT_INIT_RATING_CODE      
    ,INTEREST_TYPE      
    ,CARRYING_AMOUNT::NUMERIC AS FAIR_VALUE_AMOUNT      
    ,CASE PAYMENT_TERM       
    WHEN ''MONTHLY'' THEN ''M''      
    WHEN ''QUARTERLY'' THEN ''Q''      
    WHEN ''SEMI ANUALLY'' THEN ''H''      
    WHEN ''ANUALLY'' THEN ''Y''      
    END AS PAYMENT_TERM       
    ,CASE INTEREST_CALCULATION_CODE      
    WHEN ''ACTUAL/360'' THEN 8      
    WHEN ''ACTUAL/ACTUAL'' THEN 2      
    END AS INTEREST_CALCULATION_CODE       
    ,SOVEREIGN_FLAG::INT AS SOVEREIGN_FLAG      
    ,LAST_COUPON_DATE::DATE AS LAST_PAYMENT_DATE      
    ,NEXT_COUPON_DATE::DATE AS NEXT_PAYMENT_DATE      
    ,CONTRACT_ID AS ISIN_CODE      
    ,INV_TYPE      
    ,COLLECTABILITY::INT AS BI_COLLECTABILITY      
    ,UNAMORTIZED_DISCOUNT_PREMIUM_IN_ORI_CCY::NUMERIC AS UNAMORT_DISCOUNT_PREMIUM      
    ,DISCOUNT_PREMIUM_CCY::NUMERIC AS DISCOUNT_PREMIUM_AMOUNT      
    ,''TRSUPL'' AS SOURCE_SYSTEM      
    FROM TBLU_DATA_TREASURY A      
    LEFT JOIN IFRS_MASTER_PRODUCT_PARAM B      
    ON A.PRODUCT_CODE = B.PRD_CODE AND IS_DELETE = ''0''      
    LEFT JOIN IFRS_MASTER_EXCHANGE_RATE C      
    ON A.CURRENCY = C.CURRENCY AND A.DOWNLOAD_DATE::DATE = C.DOWNLOAD_DATE::DATE            
    WHERE F_EOMONTH(A.DOWNLOAD_DATE::DATE, 0, ''M'', ''NEXT'') = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    ----- UPDATE EXTERNAL RATING CODE -----
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT3 || ' 
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || ' INSERT INTO ' || V_TABLEINSERT3 || '      
    (      
    DOWNLOAD_DATE      
    ,CUSTOMER_NUMBER      
    ,SANDI_BANK      
    ,EXTERNAL_RATING_AGENCY      
    ,INITIAL_RATING_CODE      
    ,EXTERNAL_RATING_CODE      
    ,SOURCE_SYSTEM      
    )      
    SELECT       
    DOWNLOAD_DATE::DATE AS DOWNLOAD_DATE     
    ,CUSTOMER_NUMBER      
    ,SANDI_BANK      
    ,EXTERNAL_RATING_AGENCY      
    ,INITIAL_RATING_CODE      
    ,EXTERNAL_RATING_CODE      
    ,SOURCE_SYSTEM      
    FROM TBLU_EXTERNAL_RATING      
    WHERE DOWNLOAD_DATE::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);


    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLENAME || ' 
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND DATA_SOURCE = ''TRS'' AND SOURCE_SYSTEM = ''TRSUPL'' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLENAME || '      
    (      
     DOWNLOAD_DATE      
     ,DATA_SOURCE      
     ,MASTERID      
     ,MASTER_ACCOUNT_CODE      
     ,ACCOUNT_NUMBER      
     ,ACCOUNT_STATUS      
     ,PRODUCT_CODE      
     ,PRODUCT_TYPE      
     ,PRODUCT_GROUP      
     ,BRANCH_CODE      
     ,CUSTOMER_NUMBER      
     ,CUSTOMER_NAME      
     ,CURRENCY      
     ,EXCHANGE_RATE      
     ,OUTSTANDING      
     ,LOAN_START_DATE      
     ,LOAN_DUE_DATE      
     ,INTEREST_RATE      
     ,INTEREST_ACCRUED      
     ,EXT_RATING_AGENCY      
     ,EXT_RATING_CODE      
     ,EXT_INIT_RATING_CODE      
     ,EXT_RATING_DOWNGRADE      
     ,INTEREST_TYPE      
     ,FAIR_VALUE_AMOUNT      
     ,PAYMENT_TERM      
     ,INTEREST_CALCULATION_CODE      
     ,SOVEREIGN_FLAG      
     ,LAST_PAYMENT_DATE      
     ,NEXT_PAYMENT_DATE      
     ,ISIN_CODE      
     ,INV_TYPE      
     ,BI_COLLECTABILITY      
     ,UNAMORT_DISCOUNT_PREMIUM      
     ,DISCOUNT_PREMIUM_AMOUNT      
     ,SOURCE_SYSTEM      
     ,SANDI_BANK      
	 ,CUSTOMER_TYPE   
	 ,ACCOUNT_TYPE
	 ,CREATEDBY
	 ,CREATEDDATE    
    )      
    SELECT      
     A.DOWNLOAD_DATE      
     ,A.DATA_SOURCE      
     ,A.ACCOUNT_NUMBER AS MASTERID      
     ,A.ACCOUNT_NUMBER AS MASTER_ACCOUNT_CODE      
     ,A.ACCOUNT_NUMBER      
     ,''A'' AS ACCOUNT_STATUS      
     ,A.PRODUCT_CODE      
     ,A.PRODUCT_TYPE      
     ,A.PRODUCT_GROUP      
     ,A.BRANCH_CODE      
     ,A.CUSTOMER_NUMBER      
     ,A.CUSTOMER_NAME      
     ,A.CURRENCY      
     ,A.EXCHANGE_RATE      
     ,A.OUTSTANDING      
     ,A.LOAN_START_DATE      
     ,A.LOAN_DUE_DATE      
     ,A.INTEREST_RATE      
     ,A.INTEREST_ACCRUED      
     ,A.EXT_RATING_AGENCY      
     ,A.EXT_RATING_CODE      
     ,A.EXT_INIT_RATING_CODE      
     ,A.EXT_RATING_DOWNGRADE      
     ,A.INTEREST_TYPE      
     ,A.FAIR_VALUE_AMOUNT      
     ,A.PAYMENT_TERM      
     ,A.INTEREST_CALCULATION_CODE      
     ,A.SOVEREIGN_FLAG      
     ,A.LAST_PAYMENT_DATE      
     ,A.NEXT_PAYMENT_DATE      
     ,A.ISIN_CODE      
     ,A.INV_TYPE      
     ,A.BI_COLLECTABILITY      
     ,A.UNAMORT_DISCOUNT_PREMIUM      
     ,A.DISCOUNT_PREMIUM_AMOUNT      
     ,A.SOURCE_SYSTEM      
     ,A.SANDI_BANK      
	,D.CUSTOMER_TYPE AS  CUSTOMER_TYPE    
	,B.ACCOUNT_TYPE
	,''SP_IFRS_SYNC_TREASURY'' AS CREATEDBY         
	,GETDATE() AS CREATEDDATE 
    FROM IFRS_MASTER_TREASURY A    
	LEFT JOIN IFRS9_STG..TBL_MASTER_PRODUCT_BANKWIDE B ON A.PRODUCT_CODE =  B.PRODUCT_CODE    
	LEFT JOIN IFRS9_STG..STG_CIF D  ON A.CUSTOMER_NUMBER = D.CIF   
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND A.SOURCE_SYSTEM = ''TRSUPL'' ';
    -- EXECUTE (V_STR_QUERY);      


    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    ----- MAIN LOGIC -----

    RAISE NOTICE 'SP_IFRS_SYNC_TREASURY | | AFFECTED RECORD : %', V_RETURNROWS2;
    
    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT1;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_SYNC_TREASURY';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT1 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    ------ ====== RESULT ======
    
END;

$$;