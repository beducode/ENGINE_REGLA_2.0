---- DROP PROCEDURE SP_IFRS_IMP_INITIAL_UPDATE;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_INITIAL_UPDATE(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000',
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_CURRMONTH DATE;
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;
    V_STARTDATEOFYEAR DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100);
    V_TMPTABLE1 VARCHAR(100); 
    V_TMPTABLE2 VARCHAR(100); 
    V_TMPTABLE3 VARCHAR(100);
    V_TMPTABLE4 VARCHAR(100);
    V_TMPTABLE5 VARCHAR(100);
    V_TABLEINSERT VARCHAR(100);

    ---- VARIABLE PROCESS
    V_SEGMENT RECORD;
    V_SEGMENT_RULE RECORD;
    V_CONDITION TEXT;

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TMPTABLE1 := 'IMA_' || P_RUNID || '';
        V_TMPTABLE2 := 'IMA_CUSTOMER_' || P_RUNID || '';
        V_TMPTABLE3 := 'IMA_CURR_IMP_' || P_RUNID || '';
        V_TMPTABLE4 := 'IMA_CUST_DPD_' || P_RUNID || '';
        V_TMPTABLE5 := 'MIR' || P_RUNID || '';
        V_TABLEINSERT := 'IFRS_SCENARIO_SEGMENT_GENERATE_QUERY_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TMPTABLE1 := 'IMA';
        V_TMPTABLE2 := 'IMA_CUSTOMER';
        V_TMPTABLE3 := 'IMA_CURR_IMP';
        V_TMPTABLE4 := 'IMA_CUST_DPD';
        V_TMPTABLE5 := 'MIR';
        V_TABLEINSERT := 'IFRS_SCENARIO_SEGMENT_GENERATE_QUERY';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;
    
    V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    V_CURRMONTH := F_EOMONTH(V_CURRDATE, 0, 'M', 'NEXT');
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    V_STARTDATEOFYEAR := (DATE_PART('YEAR', V_CURRDATE) || '-01-01')::DATE;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== BODY ======
    -- UPDATE PRODUCT PARAM
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' A
        SET 
            PRODUCT_GROUP = B.PRD_GROUP 
            ,PRODUCT_TYPE = B.PRD_TYPE 
            ,PRODUCT_TYPE_1 = B.PRD_TYPE_1 
            ,REVOLVING_FLAG = CASE WHEN A.DATA_SOURCE IN (''LOAN_T24'', ''TRADE_T24'', ''TRS'') THEN A.REVOLVING_FLAG WHEN B.REPAY_TYPE_VALUE = ''REV'' THEN 1 ELSE 0 END 
            ,DATA_SOURCE = B.DATA_SOURCE 
        FROM IFRS_MASTER_PRODUCT_PARAM B 
        WHERE A.PRODUCT_CODE = B.PRD_CODE 
        AND (A.CURRENCY = B.CCY OR B.CCY = ''ALL'') 
        AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND B.IS_DELETE = 0 ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    -- SYNC CORPORATE DATA (T24 ADDONS) 
    IF(V_CURRDATE = V_CURRMONTH) THEN
        CALL SP_IFRS_SYNC_CORPORATE_DATA(P_RUNID, V_CURRDATE, P_PRC);
    END IF;

    -- INSERT IMA TO _IMA
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TMPTABLE3 || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TMPTABLE3 || ' AS 
        SELECT * 
        ,CASE WHEN DATA_SOURCE IN (''LOAN_T24'', ''TRADE_T24'', ''TRS'', ''LIMIT_T24'') THEN ''CORPORATE'' WHEN DATA_SOURCE = ''LOAN'' THEN ''RETAIL'' ELSE NULL END AS BUSINESS_UNIT 
        FROM ' || V_TABLENAME || ' 
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    IF(P_PRC = 'S') THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS NCI_' || V_TMPTABLE3 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX IF NOT EXISTS NCI_' || V_TMPTABLE3 || '
        ON ' || V_TABLENAME || ' USING BTREE
        (DOWNLOAD_DATE ASC NULLS LAST, MASTERID ASC NULLS LAST, MASTER_ACCOUNT_CODE ASC NULLS LAST, PRODUCT_CODE ASC NULLS LAST, ACCOUNT_NUMBER ASC NULLS LAST)
        TABLESPACE PG_DEFAULT';
        EXECUTE (V_STR_QUERY);
    END IF;

    -- UPDATE DPD_CIF
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TMPTABLE4 || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TMPTABLE4 || ' AS 
        SELECT 
            CUSTOMER_NUMBER
            ,MAX(DAY_PAST_DUE) AS DAY_PAST_DUE_CIF 
            ,MAX(BI_COLLECTABILITY) AS BI_COLLECT_CIF 
            ,MAX(DPD_FINAL) AS DPD_FINAL_CIF
            ,MAX(CASE WHEN RESTRUCTURE_COLLECT_FLAG = 1 THEN 1 ELSE 0 END) AS RESTRUCTURE_COLLECT_FLAG_CIF 
            ,BUSINESS_UNIT 
        FROM ' || V_TMPTABLE3 || ' 
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        GROUP BY CUSTOMER_NUMBER, BUSINESS_UNIT ';
    EXECUTE (V_STR_QUERY);

    IF(P_PRC = 'S') THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS IDX_CUST_' || V_TMPTABLE4 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX IDX_CUST_' || V_TMPTABLE4 || ' ON ' || V_TMPTABLE4 || ' (CUSTOMER_NUMBER,DAY_PAST_DUE_CIF,BI_COLLECT_CIF,DPD_FINAL_CIF,RESTRUCTURE_COLLECT_FLAG_CIF,BUSINESS_UNIT) ';
        EXECUTE (V_STR_QUERY);
    END IF;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TMPTABLE3 || ' T
        SET 
            DPD_CIF = CASE WHEN B.CUSTOMER_NUMBER IS NULL THEN 0 ELSE B.DAY_PAST_DUE_CIF END 
            ,BI_COLLECT_CIF = CASE WHEN B.CUSTOMER_NUMBER IS NULL THEN 1 ELSE B.BI_COLLECT_CIF END 
            ,DPD_FINAL_CIF = CASE WHEN B.CUSTOMER_NUMBER IS NULL THEN 0 ELSE B.DPD_FINAL_CIF END 
            ,RESTRUCTURE_COLLECT_FLAG_CIF = COALESCE(B.RESTRUCTURE_COLLECT_FLAG_CIF, 0) 
        FROM ' || V_TMPTABLE3 || ' A 
        LEFT JOIN ' || V_TMPTABLE4 || ' B 
        ON A.CUSTOMER_NUMBER = B.CUSTOMER_NUMBER AND A.BUSINESS_UNIT = B.BUSINESS_UNIT 
        WHERE T.CUSTOMER_NUMBER = A.CUSTOMER_NUMBER AND T.BUSINESS_UNIT = A.BUSINESS_UNIT 
        AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);
    -- END UPDATE DPD_CIF

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TMPTABLE3 || ' 
        SET 
            REMAINING_TENOR = (LOAN_DUE_DATE::DATE - DOWNLOAD_DATE::DATE) / 30 + 1 
            ,UNUSED_AMOUNT = CASE WHEN DATA_SOURCE = ''LOAN'' THEN 0 ELSE UNUSED_AMOUNT END 
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    -- UPDATING UNUSED_AMOUNT JUST FOR LOAN DATA_SOURCE
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TMPTABLE3 || ' 
        SET UNUSED_AMOUNT = CASE WHEN PLAFOND - OUTSTANDING < 0 THEN 0 ELSE PLAFOND - OUTSTANDING END 
        WHERE DATA_SOURCE = ''LOAN'' 
        AND DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND PRODUCT_TYPE_1 = ''PRK'' ';
    EXECUTE (V_STR_QUERY);
    -- END UPDATING UNUSED_AMOUNT JUST FOR LOAN DATA_SOURCE

    -- UPDATE PLAFOND_CIF
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TMPTABLE1 || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TMPTABLE1 || ' AS 
        SELECT 
            A.DOWNLOAD_DATE 
            ,A.MASTERID 
            ,A.CUSTOMER_NUMBER 
            ,COALESCE(A.FACILITY_NUMBER, A.MASTERID) AS FACILITY_NUMBER 
            ,A.PLAFOND * B.RATE_AMOUNT AS PLAFOND_IDR 
            ,A.BUSINESS_UNIT 
        FROM ' || V_TMPTABLE3 || ' A 
        LEFT JOIN IFRS_MASTER_EXCHANGE_RATE B 
        ON COALESCE(A.LIMIT_CURRENCY, ''IDR'') = B.CURRENCY 
        AND A.DOWNLOAD_DATE = B.DOWNLOAD_DATE 
        WHERE A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    IF(P_PRC = 'S') THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS IDX_' || V_TMPTABLE1 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX IDX_' || V_TMPTABLE1 || ' ON ' || V_TMPTABLE1 || ' (DOWNLOAD_DATE,MASTERID,CUSTOMER_NUMBER,FACILITY_NUMBER,PLAFOND_IDR,BUSINESS_UNIT) ';
        EXECUTE (V_STR_QUERY);
    END IF;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TMPTABLE2 || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TMPTABLE2 || ' AS 
        SELECT 
            DOWNLOAD_DATE 
            ,CUSTOMER_NUMBER 
            ,SUM(PLAFOND) AS PLAFOND_CIF_IDR 
            ,BUSINESS_UNIT 
        FROM
        (
            SELECT
                DOWNLOAD_DATE 
                ,CUSTOMER_NUMBER 
                ,FACILITY_NUMBER 
                ,MAX(PLAFOND_IDR) AS PLAFOND 
                ,BUSINESS_UNIT 
            FROM ' || V_TMPTABLE1 || ' 
            GROUP BY DOWNLOAD_DATE, CUSTOMER_NUMBER, FACILITY_NUMBER, BUSINESS_UNIT 
        ) A 
        GROUP BY DOWNLOAD_DATE, CUSTOMER_NUMBER, BUSINESS_UNIT ORDER BY CUSTOMER_NUMBER';
    EXECUTE (V_STR_QUERY);
    -- END UPDATE PLAFOND_CIF

    IF(P_PRC = 'S') THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS IDX_' || V_TMPTABLE2 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX IDX_' || V_TMPTABLE2 || ' ON ' || V_TMPTABLE2 || ' (DOWNLOAD_DATE,CUSTOMER_NUMBER,PLAFOND_CIF_IDR,BUSINESS_UNIT) ';
        EXECUTE (V_STR_QUERY);
    END IF;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TMPTABLE3 || ' X
        SET PLAFOND_CIF = (Y.PLAFOND_CIF_IDR / Y.RATE_AMOUNT)  
        FROM (SELECT C.DOWNLOAD_DATE, C.CUSTOMER_NUMBER, C.BUSINESS_UNIT, COALESCE(C.PLAFOND_CIF_IDR, 0) AS PLAFOND_CIF_IDR, B.RATE_AMOUNT, B.CURRENCY
        FROM ' || V_TMPTABLE2 || ' C
        LEFT JOIN IFRS_MASTER_EXCHANGE_RATE B
        ON C.DOWNLOAD_DATE = B.DOWNLOAD_DATE 
        WHERE C.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE) Y
        WHERE X.DOWNLOAD_DATE = Y.DOWNLOAD_DATE 
        AND X.BUSINESS_UNIT = Y.BUSINESS_UNIT 
        AND X.DOWNLOAD_DATE = Y.DOWNLOAD_DATE 
        AND COALESCE(X.LIMIT_CURRENCY, ''IDR'') = Y.CURRENCY 
        AND X.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);


    -- UPDATE BACK TO MASTER_ACCOUNT
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' A 
        SET 
            DPD_CIF = B.DPD_CIF 
            ,BI_COLLECT_CIF = B.BI_COLLECT_CIF 
            ,DPD_FINAL_CIF = B.DPD_FINAL_CIF
            ,UNUSED_AMOUNT = B.UNUSED_AMOUNT 
            ,REMAINING_TENOR = B.REMAINING_TENOR 
            ,PRODUCT_GROUP = B.PRODUCT_GROUP 
            ,PRODUCT_TYPE = B.PRODUCT_TYPE 
            ,PRODUCT_TYPE_1 = B.PRODUCT_TYPE_1 
            ,REVOLVING_FLAG = B.REVOLVING_FLAG 
            ,PLAFOND_CIF = B.PLAFOND_CIF 
            ,IMPAIRED_FLAG = ''C''
            ,RESTRUCTURE_COLLECT_FLAG_CIF = B.RESTRUCTURE_COLLECT_FLAG_CIF 
        FROM ' || V_TMPTABLE3 || ' B 
        WHERE A.DOWNLOAD_DATE = B.DOWNLOAD_DATE 
        AND A.MASTERID = B.MASTERID 
        AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    -- UPDATE JENIUS PAYLATER MARKET INTEREST RATE
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TMPTABLE5 || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TMPTABLE5 || ' AS 
        SELECT DEAL_TYPE, MARKET_INT_RATE, MAX(DOWNLOAD_DATE) AS DOWNLOAD_DATE 
        FROM IFRS_MARKET_INT_RATE 
        GROUP BY DEAL_TYPE, MARKET_INT_RATE 
        HAVING MAX(DOWNLOAD_DATE) <= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        ORDER BY DOWNLOAD_DATE DESC 
        LIMIT 1 ';
    EXECUTE (V_STR_QUERY);

    IF(P_PRC = 'S') THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS IDX_' || V_TMPTABLE5 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX IDX_' || V_TMPTABLE5 || ' ON ' || V_TMPTABLE5 || ' (DEAL_TYPE, MARKET_INT_RATE,DOWNLOAD_DATE) ';
        EXECUTE (V_STR_QUERY);
    END IF;


    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' A
        SET INTEREST_RATE = CAST(B.MARKET_INT_RATE AS FLOAT) 
        FROM ' || V_TMPTABLE5 || ' B 
        WHERE A.PRODUCT_CODE = B.DEAL_TYPE 
        AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);


    RAISE NOTICE 'SP_IFRS_IMP_INITIAL_UPDATE | AFFECTED RECORD : %', V_RETURNROWS2;

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLENAME;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_INITIAL_UPDATE';
    V_OPERATION = 'UPDATE';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLENAME || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    ------ ====== RESULT ======

    IF(V_CURRDATE = V_CURRMONTH) THEN
        CALL SP_IFRS_IMP_INITIAL_UPDATE_T24(P_RUNID, V_CURRDATE, P_PRC);
    END IF;

    CALL SP_IFRS_EXEC_RULE(P_RUNID, V_CURRDATE, P_PRC, 'GL');

END;

$$;