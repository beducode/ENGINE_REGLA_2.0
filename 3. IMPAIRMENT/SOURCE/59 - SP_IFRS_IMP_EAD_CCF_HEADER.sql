---- DROP PROCEDURE SP_IFRS_IMP_EAD_CCF_HEADER;
---- ON DEV CCF OVERRIDE

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_EAD_CCF_HEADER(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100); 
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLECCFCONFIG VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV_' || P_RUNID || '';
        V_TABLEINSERT4 := 'IFRS_EAD_CCF_HEADER_' || P_RUNID || '';
        V_TABLECCFCONFIG  := 'IFRS_CCF_RULES_CONFIG_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV';
        V_TABLEINSERT4 := 'IFRS_EAD_CCF_HEADER';
        V_TABLECCFCONFIG  := 'IFRS_CCF_RULES_CONFIG';
    END IF;


    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;
    
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT4 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT4 || ' AS SELECT * FROM IFRS_EAD_CCF_HEADER WHERE 0=1';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======
    
    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS TMP_CCF_RULES_CONFIG_' || P_RUNID || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE TMP_CCF_RULES_CONFIG_' || P_RUNID || ' AS 
    SELECT DISTINCT 
    A.PKID, 
    A.CCF_RULE_NAME, 
    A.SEGMENTATION_ID, 
    A.CALC_METHOD, 
    A.AVERAGE_METHOD, 
    A.CUT_OFF_DATE, 
    A.CCF_OVERRIDE,
    A.LAG_1MONTH_FLAG,  
    A.OBSERV_PERIOD_MOVING,  
    A.OS_DEF_ZERO_EXCLUDE,  
    A.HEADROOM_ZERO_EXCLUDE
    FROM ' || V_TABLECCFCONFIG || ' A     
    WHERE A.IS_DELETE = 0
    AND A.ACTIVE_FLAG = 1     
    AND CALC_METHOD <> ''EXT''';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT4 || ' A
    USING TMP_CCF_RULES_CONFIG_' || P_RUNID || ' B 
    WHERE A.CCF_RULE_ID = B.PKID
    AND DOWNLOAD_DATE = CASE WHEN B.LAG_1MONTH_FLAG = 1 THEN ''' || CAST(V_PREVMONTH AS VARCHAR(10)) || '''::DATE ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE END';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT4 || '
    (      
    DOWNLOAD_DATE, 
    CCF_RULE_ID, 
    SIMPLE_AVG_CCF,       
    WEIGHTED_AVG_CCF,
    CREATEDBY,
    CREATEDDATE
    )
    SELECT       
    CASE WHEN B.LAG_1MONTH_FLAG = 1 THEN ''' || CAST(V_PREVMONTH AS VARCHAR(10)) || '''::DATE ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE END AS DOWNLOAD_DATE, 
    CCF_RULE_ID,   
    AVG(CCF) SIMPLE_AVG_CCF,
    SUM(CCF * (EQV_PLAFOND_12M_BEFORE_DEFAULT - EQV_OS_12M_BEFORE_DEFAULT))/(SUM(EQV_PLAFOND_12M_BEFORE_DEFAULT)-SUM(EQV_OS_12M_BEFORE_DEFAULT)) AS WEIGHTED_AVG_CCF,   
    ''SP_IFRS_IMP_EAD_CCF_HEADER'' AS CREATEDBY,
    CURRENT_DATE AS CREATEDDATE  
    FROM IFRS_EAD_CCF_DETAIL_CIF A
    JOIN TMP_CCF_RULES_CONFIG_' || P_RUNID || ' B 
    ON A.CCF_RULE_ID = B.PKID
    WHERE EXCLUDE = 0 AND A.DOWNLOAD_DATE BETWEEN B.CUT_OFF_DATE AND CASE WHEN B.LAG_1MONTH_FLAG = 1 THEN ''' || CAST(V_PREVMONTH AS VARCHAR(10)) || '''::DATE ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE END
    GROUP BY CCF_RULE_ID, B.LAG_1MONTH_FLAG      
    UNION ALL    
    SELECT       
    CASE WHEN B.LAG_1MONTH_FLAG = 1 THEN ''' || CAST(V_PREVMONTH AS VARCHAR(10)) || '''::DATE ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE END AS DOWNLOAD_DATE, 
    CCF_RULE_ID,   
    AVG(CCF) SIMPLE_AVG_CCF,
    SUM(CCF * (EQV_PLAFOND_12M_BEFORE_DEFAULT - EQV_OS_12M_BEFORE_DEFAULT))/(SUM(EQV_PLAFOND_12M_BEFORE_DEFAULT)-SUM(EQV_OS_12M_BEFORE_DEFAULT)) AS WEIGHTED_AVG_CCF,   
    ''SP_IFRS_IMP_EAD_CCF_HEADER'' AS CREATEDBY,
    CURRENT_DATE AS CREATEDDATE  
    FROM IFRS_EAD_CCF_DETAIL A
    JOIN TMP_CCF_RULES_CONFIG_' || P_RUNID || ' B 
    ON A.CCF_RULE_ID = B.PKID
    WHERE EXCLUDE = 0 AND A.DOWNLOAD_DATE BETWEEN B.CUT_OFF_DATE AND CASE WHEN B.LAG_1MONTH_FLAG = 1 THEN ''' || CAST(V_PREVMONTH AS VARCHAR(10)) || '''::DATE ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE END
    GROUP BY CCF_RULE_ID, B.LAG_1MONTH_FLAG    
    UNION ALL    
    SELECT       
    CASE WHEN B.LAG_1MONTH_FLAG = 1 THEN ''' || CAST(V_PREVMONTH AS VARCHAR(10)) || '''::DATE ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE END AS DOWNLOAD_DATE, 
    CCF_RULE_ID,   
    AVG(CCF) SIMPLE_AVG_CCF,
    CASE WHEN COALESCE((SUM(EQV_PLAFOND_12M_BEFORE_DEFAULT)-SUM(EQV_OS_12M_BEFORE_DEFAULT)), 0) = 0 THEN 0 ELSE SUM(CCF * (EQV_PLAFOND_12M_BEFORE_DEFAULT - EQV_OS_12M_BEFORE_DEFAULT))/(SUM(EQV_PLAFOND_12M_BEFORE_DEFAULT)-SUM(EQV_OS_12M_BEFORE_DEFAULT)) END AS WEIGHTED_AVG_CCF,   
    ''SP_IFRS_IMP_EAD_CCF_HEADER'' AS CREATEDBY,
    CURRENT_DATE AS CREATEDDATE  
    FROM IFRS_EAD_CCF_DETAIL_FACILITY A
    JOIN TMP_CCF_RULES_CONFIG_' || P_RUNID || ' B 
    ON A.CCF_RULE_ID = B.PKID
    WHERE EXCLUDE = 0 AND A.DOWNLOAD_DATE BETWEEN B.CUT_OFF_DATE AND CASE WHEN B.LAG_1MONTH_FLAG = 1 THEN ''' || CAST(V_PREVMONTH AS VARCHAR(10)) || '''::DATE ELSE ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE END
    GROUP BY CCF_RULE_ID, B.LAG_1MONTH_FLAG';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    RAISE NOTICE 'SP_IFRS_IMP_EAD_CCF_HEADER | AFFECTED RECORD : %', V_RETURNROWS2;
    -------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT4;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_EAD_CCF_HEADER';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT4 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;