---- DROP PROCEDURE SP_IFRS_IMP_PD_MAA_ENR;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_PD_MAA_ENR(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100); 
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLEPDCONFIG VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- VARIABLE PROCESS
    V_BUCKET_GROUP VARCHAR(100);
    V_PD_RULE_ID INT; 

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV_' || P_RUNID || '';
        V_TABLEINSERT4 := 'IFRS_PD_MAA_ENR_' || P_RUNID || '';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV';
        V_TABLEINSERT4 := 'IFRS_PD_MAA_ENR';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG';
    END IF;


    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;
    
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT4 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT4 || ' AS SELECT * FROM IFRS_PD_MAA_ENR WHERE 0=1';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======
    
    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT4 ||' A
    USING ' || V_TABLEPDCONFIG || ' B 
    WHERE A.PD_RULE_ID = B.PKID
    AND TO_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
    AND B.ACTIVE_FLAG = 1 AND B.IS_DELETE = 0';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT4 ||' (DOWNLOAD_DATE
    ,BASE_DATE
    ,TO_DATE
    ,PD_RULE_ID
    ,PD_RULE_NAME
    ,BUCKET_GROUP
    ,BUCKET_FROM
    ,BUCKET_TO
    ,CALC_AMOUNT
    ,CALC_METHOD
    ,CREATEDBY
    ,CREATEDDATE)
    SELECT DOWNLOAD_DATE
    ,BASE_DATE
    ,''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AS TO_DATE
    ,A.PD_RULE_ID
    ,MAX(A.PD_RULE_NAME)
    ,MAX(A.BUCKET_GROUP)
    ,A.BUCKET_FROM
    ,A.BUCKET_TO
    ,SUM(A.CALC_AMOUNT) AS CALC_AMOUNT
    ,MAX(A.CALC_METHOD)
    ,''SP_IFRS_IMP_PD_MAA_ENR'' AS  CREATEDBY
    ,CURRENT_DATE AS CREATEDDATE 
    FROM IFRS_PD_MAA_DETAIL A 
    INNER JOIN ' || V_TABLEPDCONFIG || ' B ON
    A.PD_RULE_ID = B.PKID
    WHERE TO_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
    AND B.ACTIVE_FLAG = 1 AND B.IS_DELETE = 0 
    GROUP BY DOWNLOAD_DATE,BASE_DATE,TO_DATE,PD_RULE_ID,BUCKET_FROM,BUCKET_TO
    ORDER BY DOWNLOAD_DATE, PD_RULE_ID, BUCKET_FROM, BUCKET_TO';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS TOTAL_COUNT_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE TOTAL_COUNT_' || P_RUNID || ' AS 
    SELECT DOWNLOAD_DATE, PD_RULE_ID,BUCKET_FROM, SUM(CALC_AMOUNT) AS TOTAL_ACCOUNT
    FROM ' || V_TABLEINSERT4 || ' 
    WHERE TO_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
    GROUP BY DOWNLOAD_DATE, PD_RULE_ID,BUCKET_FROM';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || '  A 
    SET PERCENTAGE = CASE WHEN B.TOTAL_ACCOUNT = 0 THEN NULL ELSE CAST(A.CALC_AMOUNT AS DOUBLE PRECISION)/CAST(B.TOTAL_ACCOUNT AS DOUBLE PRECISION) END,
    TOTAL_ACCOUNT = B.TOTAL_ACCOUNT
    FROM TOTAL_COUNT_' || P_RUNID || ' AS B, ' || V_TABLEPDCONFIG || ' AS C
    WHERE A.DOWNLOAD_DATE = B.DOWNLOAD_DATE AND A.PD_RULE_ID = B.PD_RULE_ID AND A.BUCKET_FROM = B.BUCKET_FROM
    AND A.PD_RULE_ID = C.PKID
    AND A.TO_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
    AND C.ACTIVE_FLAG = 1 AND C.IS_DELETE = 0';
    EXECUTE (V_STR_QUERY);
    
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ENR_CURR_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ENR_CURR_' || P_RUNID || ' AS 
    SELECT * FROM ' || V_TABLEINSERT4 || '  WHERE TO_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    FOR V_PD_RULE_ID, V_BUCKET_GROUP IN
        EXECUTE 'SELECT DISTINCT PD_RULE_ID, BUCKET_GROUP FROM ENR_CURR_' || P_RUNID || ''
    LOOP

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS NOT_FOUND_BUCKET_' || P_RUNID || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE NOT_FOUND_BUCKET_' || P_RUNID || ' AS 
        SELECT ' || V_PD_RULE_ID || ' AS PD_RULE_ID, A.BUCKET_GROUP
        , A.BUCKET_FROM, A.BUCKET_TO 
        FROM VW_MAA_FULL_BUCKET A 
        LEFT JOIN ENR_CURR_' || P_RUNID || ' B ON A.BUCKET_GROUP = B.BUCKET_GROUP AND A.BUCKET_FROM= B.BUCKET_FROM AND A.BUCKET_TO = B.BUCKET_TO 
        AND B.PD_RULE_ID = ' || V_PD_RULE_ID || '
        WHERE A.BUCKET_GROUP = ''' || V_BUCKET_GROUP || '''  AND B.BUCKET_FROM IS NULL 
        ORDER BY A.BUCKET_FROM, A.BUCKET_TO';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ENR_MAA_BASE_' || P_RUNID || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ENR_MAA_BASE_' || P_RUNID || ' AS 
        SELECT DOWNLOAD_DATE
        ,BASE_DATE
        ,TO_DATE
        ,PD_RULE_ID
        ,PD_RULE_NAME
        ,BUCKET_GROUP
        ,BUCKET_FROM
        ,0 AS CALC_AMOUNT
        ,TOTAL_ACCOUNT
        ,CALC_METHOD
        ,0 AS PERCENTAGE
        ,MAX(CREATEDBY) AS CREATEDBY
        ,MAX(CREATEDDATE) AS CREATEDDATE
        FROM ENR_CURR_' || P_RUNID || ' 
        WHERE PD_RULE_ID = ' || V_PD_RULE_ID || ' 
        GROUP BY DOWNLOAD_DATE
        ,BASE_DATE
        ,TO_DATE
        ,PD_RULE_ID
        ,PD_RULE_NAME
        ,BUCKET_GROUP
        ,BUCKET_FROM,TOTAL_ACCOUNT
        ,CALC_METHOD';
        EXECUTE (V_STR_QUERY);


        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT4 || ' 
        (DOWNLOAD_DATE
        ,BASE_DATE
        ,TO_DATE
        ,PD_RULE_ID
        ,PD_RULE_NAME
        ,BUCKET_GROUP
        ,BUCKET_FROM
        ,BUCKET_TO
        ,CALC_AMOUNT
        ,TOTAL_ACCOUNT
        ,CALC_METHOD
        ,PERCENTAGE
        ,CREATEDBY
        ,CREATEDDATE)
        SELECT
        F_EOMONTH(''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE, C.INCREMENT_PERIOD, ''M'', ''PREV'') AS DOWNLOAD_DATE
        ,F_EOMONTH(''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE, C.INCREMENT_PERIOD, ''M'', ''PREV'') AS BASE_DATE
        ,''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AS TO_DATE
        ,A.PD_RULE_ID
        ,C.TM_RULE_NAME
        ,A.BUCKET_GROUP
        ,A.BUCKET_FROM
        ,A.BUCKET_TO
        ,COALESCE(B.CALC_AMOUNT,0)
        ,COALESCE(B.TOTAL_ACCOUNT,0)
        ,C.CALC_METHOD
        ,CASE WHEN COALESCE(B.TOTAL_ACCOUNT,0) = 0 THEN NULL ELSE 0 END AS PERCENTAGE
        ,''SP_IFRS_IMP_PD_MAA_ENR'' AS CREATEDBY
        ,CURRENT_DATE AS CREATEDDATE
        FROM NOT_FOUND_BUCKET_' || P_RUNID || ' A
        INNER JOIN ' || V_TABLEPDCONFIG || ' C ON A.PD_RULE_ID = C.PKID
        LEFT JOIN ENR_MAA_BASE_' || P_RUNID || ' B ON A.BUCKET_FROM = B.BUCKET_FROM AND A.PD_RULE_ID = B.PD_RULE_ID
        WHERE C.ACTIVE_FLAG = 1 AND C.IS_DELETE = 0';
        EXECUTE (V_STR_QUERY);

        GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
        V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
        V_RETURNROWS := 0;

    END LOOP;

    RAISE NOTICE 'SP_IFRS_IMP_PD_MAA_ENR | AFFECTED RECORD : %', V_RETURNROWS2;
    -------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT4;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_PD_MAA_ENR';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT4 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;