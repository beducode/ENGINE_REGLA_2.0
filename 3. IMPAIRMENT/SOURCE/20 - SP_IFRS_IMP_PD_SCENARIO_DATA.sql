---- DROP PROCEDURE SP_IFRS_IMP_PD_SCENARIO_DATA;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_PD_SCENARIO_DATA(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100); 
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLEPDCONFIG VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- VAR PROCESS
    V_PD_RULE_ID  VARCHAR(50);        
    V_DEFAULT_RULE_ID VARCHAR(50);        
    V_RULE_TYPE  VARCHAR(50);        
    V_SEGMENT VARCHAR(100);        
    V_SUB_SEGMENT VARCHAR(100);        
    V_GROUP_SEGMENT VARCHAR(100);        
    V_CONDITION  VARCHAR(4000);         
    V_IA_FLAG VARCHAR(1);    

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV_' || P_RUNID || '';
        V_TABLEINSERT4 := 'TMP_IFRS_PD_SCENARIO_DATA_' || P_RUNID || '';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV';
        V_TABLEINSERT4 := 'TMP_IFRS_PD_SCENARIO_DATA';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG';
    END IF;

    

    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;

    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEPDCONFIG || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEPDCONFIG || ' AS SELECT * FROM IFRS_PD_RULES_CONFIG';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT4 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT4 || ' AS SELECT * FROM TMP_IFRS_PD_SCENARIO_DATA WHERE 0=1';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======
    
    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || V_TABLEINSERT4 || '';
    EXECUTE (V_STR_QUERY);

    FOR V_PD_RULE_ID,V_SEGMENT,V_SUB_SEGMENT,V_GROUP_SEGMENT,V_CONDITION,V_IA_FLAG IN
    EXECUTE 'SELECT A.PKID,B.SEGMENT,B.SUB_SEGMENT,B.GROUP_SEGMENT,REPLACE(B.CONDITION,''"'','''') AS CONDITION,A.IA_FLAG        
    FROM ' || V_TABLEPDCONFIG || ' A INNER JOIN  IFRS_SCENARIO_SEGMENT_GENERATE_QUERY B ON A.SEGMENTATION_ID= B.RULE_ID   AND B.SEGMENT_TYPE = ''PD_SEGMENT''    
    WHERE IS_DELETE = 0 AND ACTIVE_FLAG = 1 AND A.CUT_OFF_DATE <= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND LAG_1MONTH_FLAG = 1  ORDER BY PKID'
    LOOP
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT4 || ' (DOWNLOAD_DATE        
        ,PD_RULE_ID        
        ,PD_RULE_NAME        
        ,DEFAULT_RULE_ID        
        ,BUCKET_GROUP        
        ,MASTERID         
        ,CUSTOMER_NUMBER        
        ,SEGMENT        
        ,SUB_SEGMENT        
        ,GROUP_SEGMENT        
        ,PD_METHOD        
        ,PD_UNIQUE_ID        
        ,CALC_METHOD        
        ,CALC_AMOUNT        
        ,BUCKET_ID        
        ,OUTSTANDING        
        ,IMPAIRED_FLAG        
        ,DEFAULT_FLAG        
        ,LIFETIME        
        ,FAIR_VALUE_AMOUNT        
        ,BI_COLLECTABILITY        
        ,RATING_CODE        
        ,DAY_PAST_DUE      
        ,DPD_CIF        
        ,CREATEDBY        
        ,CREATEDDATE)        
        SELECT DOWNLOAD_DATE        
        ,B.PKID AS PD_RULE_ID        
        ,B.TM_RULE_NAME AS PD_RULE_NAME        
        ,B.DEFAULT_RULE_ID        
        ,B.BUCKET_GROUP        
        ,A.MASTERID         
        ,A.CUSTOMER_NUMBER        
        ,'''|| V_SEGMENT ||''' AS SEGMENT        
        ,'''|| V_SUB_SEGMENT ||''' AS SUB_SEGMENT        
        ,'''|| V_GROUP_SEGMENT ||''' AS GROUP_SEGMENT        
        ,PD_METHOD        
        ,CASE WHEN CALC_METHOD IN (''CNOC'', ''COS'', ''CVS'')  THEN CUSTOMER_NUMBER ELSE MASTERID END  AS PD_UNIQUE_ID        
        ,CALC_METHOD        
        ,0 AS CALC_AMOUNT        
        ,BUCKET_ID        
        ,OUTSTANDING*COALESCE(EXCHANGE_RATE,1) AS OUTSTANDING        
        ,IMPAIRED_FLAG        
        ,DEFAULT_FLAG        
        ,LIFETIME AS LIFETIME        
        ,FAIR_VALUE_AMOUNT*COALESCE(EXCHANGE_RATE,1) AS FAIR_VALUE_AMOUNT        
        ,BI_COLLECTABILITY        
        ,A.RATING_CODE AS RATING_CODE        
        ,DAY_PAST_DUE        
        ,DPD_CIF        
        ,''SYSTEM'' AS CREATEDBY        
        ,CURRENT_DATE AS CREATEDDATE         
        FROM ' || V_TABLENAME_MON || ' A        
        JOIN ' || V_TABLEPDCONFIG || ' B ON B.PKID = ' || V_PD_RULE_ID || '         
        WHERE A.DOWNLOAD_DATE =  ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
        ' || CASE WHEN V_GROUP_SEGMENT LIKE '%JENIUS%' THEN ' AND A.CUSTOMER_NUMBER NOT IN (SELECT DISTINCT CUSTOMER_NUMBER FROM IFRS_EXCLUDE_JENIUS)' ELSE '' END || '
        AND ' || V_CONDITION || ' ';
        EXECUTE (V_STR_QUERY);

        GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
        V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
        V_RETURNROWS := 0;
    END LOOP;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS DEFAULT_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE DEFAULT_' || P_RUNID || ' AS
    SELECT * FROM IFRS_DEFAULT WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || ' A         
    SET BUCKET_ID = E.BUCKET_ID,  
    BUCKET_ID_ORIG =  E.BUCKET_ID        
    FROM IFRS_BUCKET_HEADER AS C, IFRS_BUCKET_DETAIL AS E 
    WHERE A.BUCKET_GROUP = E.BUCKET_GROUP AND E.IS_DELETE = 0  AND (CASE        
    WHEN C.OPTION_GROUPING = ''DPD''        
    THEN A.DAY_PAST_DUE        
    WHEN C.OPTION_GROUPING = ''DPD_CIF''        
    THEN A.DPD_CIF        
    WHEN C.OPTION_GROUPING = ''BIC''        
    THEN A.BI_COLLECTABILITY        
    END) BETWEEN E.RANGE_START AND E.RANGE_END
    AND A.BUCKET_GROUP = C.BUCKET_GROUP  AND C.IS_DELETE = 0';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS MAX_BUCKET_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE MAX_BUCKET_' || P_RUNID || ' AS 
    SELECT BUCKET_GROUP, MAX(BUCKET_ID) AS MAX_BUCKET FROM IFRS_BUCKET_DETAIL GROUP BY BUCKET_GROUP';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || ' A         
    SET DEFAULT_FLAG = CASE WHEN B.MASTERID IS NOT NULL THEN 1 ELSE 0 END,        
    BUCKET_ID = CASE WHEN B.MASTERID IS NOT NULL THEN C.MAX_BUCKET ELSE A.BUCKET_ID END,  
    BUCKET_ID_ORIG = CASE WHEN B.MASTERID IS NOT NULL THEN C.MAX_BUCKET ELSE A.BUCKET_ID END            
    FROM DEFAULT_' || P_RUNID || ' AS B, MAX_BUCKET_' || P_RUNID || ' AS C 
    WHERE C.BUCKET_GROUP = A.BUCKET_GROUP
    AND A.DEFAULT_RULE_ID = B.RULE_ID   AND A.MASTERID = B.MASTERID';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS FP_ACCOUNT_' || P_RUNID || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE FP_ACCOUNT_' || P_RUNID || ' AS
    SELECT * FROM IFRS_IMP_DEFAULT_STATUS  WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND FP_FLAG = 1 ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || ' A        
    SET BUCKET_ID = 0         
    FROM FP_ACCOUNT_' || P_RUNID || ' AS B, IFRS_BUCKET_HEADER AS C
    WHERE A.BUCKET_GROUP = C.BUCKET_GROUP AND IS_DELETE = 0 AND INCLUDE_FULLYPAID_FLAG = 1
    AND A.MASTERID = B.MASTERID';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM IFRS_PD_SCENARIO_DATA A
    USING ' || V_TABLEPDCONFIG || ' B
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AND B.ACTIVE_FLAG = 1 AND B.IS_DELETE = 0
    AND A.PD_RULE_ID = B.PKID';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO IFRS_PD_SCENARIO_DATA SELECT * FROM ' || V_TABLEINSERT4 || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS PD_DATA_12M_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE PD_DATA_12M_' || P_RUNID || ' AS
    SELECT PD_UNIQUE_ID,PD_RULE_ID,MAX(CASE WHEN DEFAULT_FLAG = 1 THEN 1 ELSE 0 END) AS MAX_DEFAULT_FLAG 
    FROM IFRS_PD_SCENARIO_DATA         
    WHERE DOWNLOAD_DATE BETWEEN ''' || CAST(V_LASTYEARNEXTMONTH AS VARCHAR(10)) || '''::DATE AND ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE   
    GROUP BY PD_UNIQUE_ID,PD_RULE_ID';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE IFRS_PD_SCENARIO_DATA A        
    SET NEXT_12M_DEFAULT_FLAG = B.MAX_DEFAULT_FLAG           
    FROM PD_DATA_12M_' || P_RUNID || ' AS B, ' || V_TABLEPDCONFIG || ' AS C 
    WHERE A.PD_RULE_ID = C.PKID
    AND A.PD_RULE_ID = B.PD_RULE_ID AND  A.PD_UNIQUE_ID = B.PD_UNIQUE_ID 
    AND A.DOWNLOAD_DATE = ''' || CAST(V_LASTYEAR AS VARCHAR(10)) || '''::DATE        
    AND C.ACTIVE_FLAG = 1
    AND C.IS_DELETE = 0';
    EXECUTE (V_STR_QUERY);

    RAISE NOTICE 'SP_IFRS_IMP_PD_SCENARIO_DATA | AFFECTED RECORD : %', V_RETURNROWS2;
    -------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT4;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_PD_SCENARIO_DATA';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT4 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;