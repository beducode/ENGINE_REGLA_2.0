---- DROP PROCEDURE SP_IFRS_IMP_PD_FL_YEAR_TO_MONTH;

CREATE OR REPLACE PROCEDURE SP_IFRS_IMP_PD_FL_YEAR_TO_MONTH(
    IN P_RUNID VARCHAR(20) DEFAULT 'S_00000_0000', 
    IN P_DOWNLOAD_DATE DATE DEFAULT NULL,
    IN P_PRC VARCHAR(1) DEFAULT 'S')
LANGUAGE PLPGSQL AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_PREVMONTH DATE;
    V_CURRDATE DATE;
    V_LASTYEAR DATE;
    V_LASTYEARNEXTMONTH DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100); 
    V_TABLENAME_MON VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);
    V_TABLEINSERT6 VARCHAR(100);
    V_TABLEINSERT7 VARCHAR(100);
    V_TABLEPDCONFIG VARCHAR(100);
    V_TABLEPVIEWPD VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLENAME_MON := 'TMP_IMAM_' || P_RUNID || '';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV_' || P_RUNID || '';
        V_TABLEINSERT4 := 'IFRS_IMP_PD_FL_TERM_STRUCTURE_' || P_RUNID || '';
        V_TABLEINSERT5 := 'IFRS_PD_FL_OVERRIDE';
        V_TABLEINSERT6 := 'IFRS_PD_TERM_STRUCTURE_NOFL_' || P_RUNID || '';
        V_TABLEPVIEWPD := 'VW_PD_FL_OVERRIDE';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLENAME_MON := 'IFRS_MASTER_ACCOUNT_MONTHLY';
        V_TABLEINSERT1 := 'TMP_IFRS_ECL_IMA';
        V_TABLEINSERT2 := 'IFRS_IMA_IMP_CURR';
        V_TABLEINSERT3 := 'IFRS_IMA_IMP_PREV';
        V_TABLEINSERT4 := 'IFRS_IMP_PD_FL_TERM_STRUCTURE';
        V_TABLEINSERT5 := 'IFRS_PD_FL_OVERRIDE';
        V_TABLEINSERT6 := 'IFRS_PD_TERM_STRUCTURE_NOFL';
        V_TABLEPVIEWPD := 'VW_PD_FL_OVERRIDE';
        V_TABLEPDCONFIG := 'IFRS_PD_RULES_CONFIG';
    END IF;
    

    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE INTO V_CURRDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
    END IF;
    
    V_PREVMONTH := F_EOMONTH(V_CURRDATE, 1, 'M', 'PREV');
    V_LASTYEAR := F_EOMONTH(V_CURRDATE, 1, 'Y', 'PREV');
    V_LASTYEARNEXTMONTH := F_EOMONTH(V_LASTYEAR, 1, 'M', 'NEXT');
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT4 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT4 || ' AS SELECT * FROM IFRS_IMP_PD_FL_TERM_STRUCTURE WHERE 0=1';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======
    
    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT4 || ' A
    USING ' || V_TABLEPDCONFIG || ' B 
    WHERE A.PD_RULE_ID = B.PKID
    AND DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
    AND B.ACTIVE_FLAG = 1 AND B.IS_DELETE = 0';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT4 || ' 
    (
    DOWNLOAD_DATE
    ,PD_EFFECTIVE_DATE
    ,SCALAR_EFFECTIVE_DATE
    ,ECL_MODEL_ID
    ,SEGMENTATION_ID
    ,PD_RULE_ID
    ,PD_RULE_NAME
    ,ME_MODEL_ID
    ,BUCKET_GROUP
    ,BUCKET_ID
    ,BUCKET_NAME
    ,FL_SEQ
    ,FL_MONTH
    ,FL_YEAR
    ,PD_FINAL
    ,CREATEDBY
    ,CREATEDDATE
    ,PD_RATE   
    ,SCALAR
    ,PD_SCALAR
    ,CUMULATIVE_PD_SCALAR
    )
    SELECT DISTINCT ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE AS DOWNLOAD_DATE
    ,B.EFF_DATE AS PD_EFFECTIVE_DATE
    ,B.SCALAR_EFF_DATE
    ,B.ECL_MODEL_ID
    ,B.SEGMENTATION_ID AS SEGMENTATION_ID
    ,C.PD_RULE_ID
    ,PD_RULE_NAME
    ,ME_MODEL_ID
    ,C.BUCKET_GROUP
    ,BUCKET_ID
    ,BUCKET_NAME
    ,C.FL_SEQ
    ,C.FL_MONTH
    ,C.FL_YEAR
    ,NULL::DOUBLE PRECISION AS PD_FINAL
    ,''SYSTEM'' AS CREATEDBY
    ,CURRENT_DATE AS  CREATEDDATE
    ,CASE WHEN (F.PD_OVERRIDE IS NULL OR F.PD_OVERRIDE = 0) THEN PD_RATE ELSE F.PD_OVERRIDE END AS PD_RATE
    ,COALESCE(D.SCALAR_FINAL,1) AS SCALAR
    ,CASE WHEN E.BUCKET_GROUP IS NOT NULL AND C.FL_SEQ = 1 THEN 1 
    WHEN CASE WHEN (F.PD_OVERRIDE IS NULL OR F.PD_OVERRIDE = 0) THEN PD_RATE ELSE F.PD_OVERRIDE END * COALESCE(D.SCALAR_FINAL,1) > 1 THEN 1 
    ELSE CASE WHEN (F.PD_OVERRIDE IS NULL OR F.PD_OVERRIDE = 0) THEN PD_RATE ELSE F.PD_OVERRIDE END * COALESCE(D.SCALAR_FINAL,1) END AS PD_SCALAR
    ,NULL::DOUBLE PRECISION AS CUMULATIVE_PD_SCALAR
    FROM IFRS_ECL_MODEL_HEADER A 
    INNER JOIN IFRS_ECL_MODEL_DETAIL_PD B ON A.PKID = B.ECL_MODEL_ID 
    INNER JOIN ' || V_TABLEINSERT6 || ' C ON B.PD_MODEL_ID = C.PD_RULE_ID AND B.EFF_DATE = C.DOWNLOAD_DATE
    LEFT JOIN IFRS_ME_FL_SCALAR_RESULT D ON B.ME_MODEL_ID = D.MODEL_ID AND B.SCALAR_EFF_DATE = D.PERIOD_DATE AND C.FL_YEAR = D.FL_YEAR
    LEFT JOIN VW_IFRS_MAX_BUCKET E ON C.BUCKET_GROUP = E.BUCKET_GROUP AND C.BUCKET_ID = E.MAX_BUCKET_ID
    LEFT JOIN ' || V_TABLEINSERT5 || ' F ON F.EFFECTIVE_DATE = B.EFF_DATE
	AND F.FL_DATE = B.SCALAR_EFF_DATE
	AND F.PD_CONFIGURATION_NAME = C.PD_RULE_NAME
	AND F.PD_RULE_ID = C.PD_RULE_ID
	AND F.FL_SEQ = C.FL_SEQ
    AND F.FL_MONTH = C.FL_MONTH
    AND F.FL_YEAR = C.FL_YEAR  
    WHERE  A.IS_DELETE = 0 AND A.ACTIVE_STATUS::INT = 1';
    EXECUTE (V_STR_QUERY);
    

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    RAISE NOTICE 'INSERT INTO IFRS_IMP_PD_FL_TERM_STRUCTURE | AFFECTED RECORD : %', V_RETURNROWS2;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS CUMMULATIVE_PD_' || P_RUNID || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE CUMMULATIVE_PD_' || P_RUNID || ' AS 
    SELECT *, 
    CASE WHEN SUM(PD_SCALAR) OVER (PARTITION BY DOWNLOAD_DATE,ECL_MODEL_ID, PD_RULE_ID,BUCKET_ID,SEGMENTATION_ID ORDER BY FL_SEQ)  > 1 THEN CAST( 1 AS DOUBLE PRECISION) 
    ELSE CAST(SUM(PD_SCALAR) OVER (PARTITION BY DOWNLOAD_DATE,ECL_MODEL_ID, PD_RULE_ID,BUCKET_ID,SEGMENTATION_ID ORDER BY FL_SEQ) AS DOUBLE PRECISION) END  AS CUMULATIVE_PD_SCALAR2
    FROM ' || V_TABLEINSERT4 || ' WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS IDX_CUMMULATIVE_PD_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX IDX_CUMMULATIVE_PD_' || P_RUNID || ' ON CUMMULATIVE_PD_' || P_RUNID || ' (DOWNLOAD_DATE, ECL_MODEL_ID, SEGMENTATION_ID, PD_RULE_ID, BUCKET_ID, FL_SEQ) ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS PD_FINAL_' || P_RUNID || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE PD_FINAL_' || P_RUNID || ' AS 
    SELECT *,
    CAST(COALESCE(CUMULATIVE_PD_SCALAR2,0) AS DOUBLE PRECISION) - CAST(COALESCE(LAG(CUMULATIVE_PD_SCALAR2) OVER (PARTITION BY DOWNLOAD_DATE,ECL_MODEL_ID, PD_RULE_ID,BUCKET_ID,SEGMENTATION_ID ORDER BY FL_SEQ),0) AS DOUBLE PRECISION) AS PD_FINAL2
    FROM CUMMULATIVE_PD_' || P_RUNID || '
    WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS IDX_PD_FINAL_' || P_RUNID || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX IDX_PD_FINAL_' || P_RUNID || ' ON PD_FINAL_' || P_RUNID || ' (ECL_MODEL_ID, SEGMENTATION_ID, PD_RULE_ID, BUCKET_ID, FL_SEQ) ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'WITH CTE AS (
    SELECT B.PD_FINAL2, B.CUMULATIVE_PD_SCALAR2 , B.ECL_MODEL_ID, B.SEGMENTATION_ID, B.PD_RULE_ID, B.BUCKET_ID, B.FL_SEQ
    FROM ' || V_TABLEINSERT4 || ' A 
    INNER JOIN PD_FINAL_' || P_RUNID || ' B ON A.ECL_MODEL_ID = B.ECL_MODEL_ID AND A.SEGMENTATION_ID = B.SEGMENTATION_ID AND A.PD_RULE_ID = B.PD_RULE_ID 
    AND A.BUCKET_ID = B.BUCKET_ID AND A.FL_SEQ = B.FL_SEQ
    INNER JOIN ' || V_TABLEPDCONFIG || ' C ON A.PD_RULE_ID = C.PKID
    WHERE A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
    AND C.ACTIVE_FLAG = 1 AND C.IS_DELETE = 0
    )

    UPDATE ' || V_TABLEINSERT4 || ' AS A
    SET PD_FINAL = B.PD_FINAL2,
        CUMULATIVE_PD_SCALAR = B.CUMULATIVE_PD_SCALAR2
    FROM CTE AS B
    WHERE A.ECL_MODEL_ID = B.ECL_MODEL_ID
        AND A.SEGMENTATION_ID = B.SEGMENTATION_ID
        AND A.PD_RULE_ID = B.PD_RULE_ID
        AND A.BUCKET_ID = B.BUCKET_ID
        AND A.FL_SEQ = B.FL_SEQ
        AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE';
    EXECUTE (V_STR_QUERY);
    

    RAISE NOTICE 'SP_IFRS_IMP_PD_FL_YEAR_TO_MONTH | AFFECTED RECORD : %', V_RETURNROWS2;
    -------- ====== BODY ======
    
    -------- START UPDATE FINAL PD TO TABLE IFRS_PD_FL_OVERRIDE ======
    IF P_PRC = 'P' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || V_TABLEINSERT5 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT5 || ' (EFFECTIVE_DATE,
        FL_DATE,
        PD_CONFIGURATION_NAME,
        PD_RULE_ID,
        FL_SEQ,
        FL_YEAR,
        FL_MONTH,
        PD_RATE_SYSTEM,
        PD_OVERRIDE)
        SELECT * FROM ' || V_TABLEPVIEWPD || '';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- END UPDATE FINAL PD TO TABLE IFRS_PD_FL_OVERRIDE ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT4;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_IMP_PD_FL_YEAR_TO_MONTH';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT4 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    ------ ====== RESULT ======

END;

$$;