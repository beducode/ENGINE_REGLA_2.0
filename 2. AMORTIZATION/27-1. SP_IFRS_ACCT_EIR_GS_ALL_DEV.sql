CREATE OR REPLACE PROCEDURE SP_IFRS_ACCT_EIR_GS_ALL(
	IN P_RUNID character varying DEFAULT 'S_00000_0000'::character varying,
	IN P_DOWNLOAD_DATE date DEFAULT NULL::DATE,
	IN p character varying DEFAULT 'S'::character varying)
 LANGUAGE PLPGSQL
AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
    V_LOOP2 BIGINT;
    V_VCNT2 BIGINT;
    V_COUNTER BIGINT;
    V_MAXCOUNTER BIGINT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLEINSERT1 := 'IFRS_ACCT_EIR_CF_ECF1_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_ACCT_EIR_PAYM_GS_DATE_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_ACCT_EIR_PAYM_GS_' || P_RUNID || '';
    ELSE 
        V_TABLEINSERT1 := 'IFRS_ACCT_EIR_CF_ECF1';
        V_TABLEINSERT2 := 'IFRS_ACCT_EIR_PAYM_GS_DATE';
        V_TABLEINSERT3 := 'IFRS_ACCT_EIR_PAYM_GS';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT1 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT1 || ' AS SELECT * FROM IFRS_ACCT_EIR_CF_ECF1 WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT2 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT2 || ' AS SELECT * FROM IFRS_ACCT_EIR_PAYM_GS_DATE WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT3 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT3 || ' AS SELECT * FROM IFRS_ACCT_EIR_PAYM_GS WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======

    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'START', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '');

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || '	UPDATE ' || V_TABLEINSERT2 || '
	SET EIR = NULL
    ,NEXT_EIR = NULL
    ,FINAL_EIR = NULL
    ,EIR_NOCF = NULL
    ,NEXT_EIR_NOCF = NULL
    ,FINAL_EIR_NOCF = NULL';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE TMP_GS2';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO TMP_GS2 (
		MASTERID
		,DTMIN
		,CNTMIN
		,BENEFIT
		,STAFFLOAN
		,COST_AMT
		,FEE_AMT
		,GAIN_LOSS_FEE_AMT
		,GAIN_LOSS_COST_AMT
		)
	SELECT B.MASTERID
		,C.DTMIN
		,C.CNTMIN
		,B.BENEFIT
		,B.STAFFLOAN
		,B.COST_AMT
		,B.FEE_AMT
		,COALESCE(B.GAIN_LOSS_FEE_AMT, 0) --20180226 GAIN LOSS ADJ  
		,COALESCE(B.GAIN_LOSS_COST_AMT, 0)
	FROM ' || V_TABLEINSERT1 || ' B
	JOIN ' || V_TABLEINSERT2 || ' C ON C.MASTERID = B.MASTERID';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' A
	SET PREV_UNAMORT1 = CASE 
			WHEN B.STAFFLOAN = 1
				AND B.BENEFIT < 0
				THEN B.BENEFIT
			WHEN B.STAFFLOAN = 1
				AND B.BENEFIT >= 0
				THEN 0
			ELSE B.FEE_AMT - B.GAIN_LOSS_FEE_AMT
			END + CASE 
			WHEN B.STAFFLOAN = 1
				AND B.BENEFIT <= 0
				THEN 0
			WHEN B.STAFFLOAN = 1
				AND B.BENEFIT > 0
				THEN B.BENEFIT
			ELSE B.COST_AMT - B.GAIN_LOSS_COST_AMT
			END
		,PREV_UNAMORT_NOCF1 = 0
		,EIR1 = CASE 
			WHEN B.STAFFLOAN = 1
				THEN 10.5
			WHEN N_INT_RATE > 1
				THEN N_INT_RATE
			ELSE 1
			END
		,EIR2 = CASE 
			WHEN B.STAFFLOAN = 1
				THEN 11
			WHEN N_INT_RATE > 1
				THEN N_INT_RATE
			ELSE 1
			END + (
			0.01 * CASE 
				WHEN N_INT_RATE > 1
					THEN N_INT_RATE
				ELSE 1
				END
			)
		,EIR_NOCF1 = CASE 
			WHEN B.STAFFLOAN = 1
				THEN 10.5
			WHEN N_INT_RATE > 1
				THEN N_INT_RATE
			ELSE 1
			END
		,EIR_NOCF2 = CASE 
			WHEN B.STAFFLOAN = 1
				THEN 11
			WHEN N_INT_RATE > 1
				THEN N_INT_RATE
			ELSE 1
			END + (
			0.01 * CASE 
				WHEN N_INT_RATE > 1
					THEN N_INT_RATE
				ELSE 1
				END
			)
	FROM TMP_GS2 B
	WHERE B.MASTERID = A.MASTERID
		AND A.COUNTER = B.CNTMIN';
    EXECUTE (V_STR_QUERY);

    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '1');

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
	SET UNAMORT = B.PREV_UNAMORT1,UNAMORT_NOCF = B.PREV_UNAMORT_NOCF1
	FROM ' || V_TABLEINSERT3 || ' B
	WHERE B.MASTERID = A.MASTERID AND B.PMT_DATE = A.DTMIN';
    EXECUTE (V_STR_QUERY);

    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '2');

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' A
    SET PREV_UNAMORT_NOCF2 = PREV_UNAMORT_NOCF1
    ,PREV_CRYAMT_NOCF1 = N_OSPRN_PREV + PREV_UNAMORT_NOCF1
    ,PREV_CRYAMT_NOCF2 = N_OSPRN_PREV + PREV_UNAMORT_NOCF1
    ,EIRAMT_NOCF1 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF1 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
    END
    ,EIRAMT_NOCF2 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF2 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
    END
    ,AMORT_NOCF1 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF1 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
    END - N_INT_PAYMENT
    ,AMORT_NOCF2 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF2 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
    END - N_INT_PAYMENT
    ,UNAMORT_NOCF1 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF1 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
    END - N_INT_PAYMENT + PREV_UNAMORT_NOCF1
    ,UNAMORT_NOCF2 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF2 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
    END - N_INT_PAYMENT + PREV_UNAMORT_NOCF1
    ,CRYAMT_NOCF1 = (N_OSPRN_PREV + PREV_UNAMORT_NOCF1) - N_PRN_PAYMENT + (
    CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF1 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
    END - N_INT_PAYMENT
    ) + DISB_AMOUNT
    ,CRYAMT_NOCF2 = (N_OSPRN_PREV + PREV_UNAMORT_NOCF1) - N_PRN_PAYMENT + (
    CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF2 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
    END - N_INT_PAYMENT
    ) + DISB_AMOUNT
    ,
    --WITH CF PART  
    PREV_UNAMORT2 = PREV_UNAMORT1
    ,PREV_CRYAMT1 = N_OSPRN_PREV + PREV_UNAMORT1
    ,PREV_CRYAMT2 = N_OSPRN_PREV + PREV_UNAMORT1
    ,EIRAMT1 =
    /*  BCA DISABLE BPI   
    CASE WHEN (A.COUNTER = 1 AND A.SPECIAL_FLAG = 1)  
    THEN  
    EIR1 /100*(DATEDIFF(DAY,A.PREV_PMT_DATE,A.PMT_DATE))*  
    (N_OSPRN_PREV + PREV_UNAMORT1)/12/(DATEDIFF(DAY,  
    CASE WHEN A.PMT_DATE = EOMONTH(A.PMT_DATE)   
    THEN EOMONTH(DATEADD(MONTH,-1,A.PMT_DATE)) ELSE DATEADD(MONTH,-1,A.PMT_DATE) END,  
    A.PMT_DATE))  
    ELSE 
    */
    CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR1 * (N_OSPRN_PREV + PREV_UNAMORT1))
    /*  BCA DISABLE BPI END */
    END
    ,EIRAMT2 =
    /*  BCA DISABLE BPI
    CASE WHEN (A.COUNTER = 1 AND A.SPECIAL_FLAG = 1)  
    THEN  
    EIR2 /100*(DATEDIFF(DAY,A.PREV_PMT_DATE,A.PMT_DATE))*  
    (N_OSPRN_PREV + PREV_UNAMORT1)/12/(DATEDIFF(DAY,  
    CASE WHEN A.PMT_DATE = EOMONTH(A.PMT_DATE)   
    THEN EOMONTH(DATEADD(MONTH,-1,A.PMT_DATE)) ELSE DATEADD(MONTH,-1,A.PMT_DATE) END,  
    A.PMT_DATE))  
    ELSE  
    */
    CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR2 * (N_OSPRN_PREV + PREV_UNAMORT1))
    /*  BCA DISABLE BPI END  */
    END
    ,AMORT1 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR1 * (N_OSPRN_PREV + PREV_UNAMORT1))
    END - N_INT_PAYMENT
    ,AMORT2 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR2 * (N_OSPRN_PREV + PREV_UNAMORT1))
    END - N_INT_PAYMENT
    ,UNAMORT1 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR1 * (N_OSPRN_PREV + PREV_UNAMORT1))
    END - N_INT_PAYMENT + PREV_UNAMORT1
    ,UNAMORT2 = CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR2 * (N_OSPRN_PREV + PREV_UNAMORT1))
    END - N_INT_PAYMENT + PREV_UNAMORT1
    ,CRYAMT1 = (N_OSPRN_PREV + PREV_UNAMORT1) - N_PRN_PAYMENT + (
    CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR1 * (N_OSPRN_PREV + PREV_UNAMORT1))
    END - N_INT_PAYMENT
    ) + DISB_AMOUNT
    ,CRYAMT2 = (N_OSPRN_PREV + PREV_UNAMORT1) - N_PRN_PAYMENT + (
    CASE 
    --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''1''
    ,''6''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
    WHEN INTCALCCODE IN (
    ''2''
    ,''3''
    )
    THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
    ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR2 * (N_OSPRN_PREV + PREV_UNAMORT1))
    END - N_INT_PAYMENT) + DISB_AMOUNT
	FROM ' || V_TABLEINSERT2 || ' C
	WHERE C.MASTERID = A.MASTERID AND A.COUNTER = C.CNTMIN';
    EXECUTE (V_STR_QUERY);

    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '3');

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE IFRS_GS_DATE1';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO IFRS_GS_DATE1 (
    MASTERID
    ,PMT_DATE
    ,PERIOD
    )
	SELECT MASTERID
		,DTMIN
		,PERIOD
	FROM ' || V_TABLEINSERT2 || '';
    EXECUTE (V_STR_QUERY);

    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '4');

    V_LOOP2 := 0;
    WHILE 1 = 1 
        LOOP 
            V_LOOP2 := V_LOOP2 + 1;

            IF V_LOOP2 > 50 THEN EXIT; END IF;

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', 'LOOP ' || V_LOOP2 ||  '');

            V_COUNTER := 1;
        
            EXECUTE 'SELECT COALESCE(MAX(PERIOD), 0) FROM IFRS_GS_DATE1' INTO V_MAXCOUNTER;

            IF V_MAXCOUNTER <= 0 THEN EXIT; END IF;

            WHILE V_COUNTER <= V_MAXCOUNTER
            LOOP

                V_STR_QUERY := '';
                V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' A
                SET PREV_UNAMORT_NOCF1 = C.UNAMORT_NOCF1
                ,PREV_UNAMORT_NOCF2 = C.UNAMORT_NOCF2
                ,PREV_CRYAMT_NOCF1 = C.CRYAMT_NOCF1
                ,PREV_CRYAMT_NOCF2 = C.CRYAMT_NOCF2
                ,EIR_NOCF1 = C.EIR_NOCF1
                ,EIR_NOCF2 = C.EIR_NOCF2
                ,EIRAMT_NOCF1 = CASE 
                WHEN A.INTCALCCODE IN (
                ''1''
                ,''6''
                )
                THEN CAST(A.I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * C.EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * C.CRYAMT_NOCF1
                WHEN A.INTCALCCODE IN (
                ''2''
                ,''3''
                )
                THEN CAST(A.I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * C.EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * C.CRYAMT_NOCF1
                ELSE (CAST(A.M AS NUMERIC(18, 10)) / CAST(1200 AS DOUBLE PRECISION) * C.EIR_NOCF1 * C.CRYAMT_NOCF1)
                END
                ,EIRAMT_NOCF2 = CASE 
                WHEN A.INTCALCCODE IN (
                ''1''
                ,''6''
                )
                THEN CAST(A.I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * C.EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * C.CRYAMT_NOCF2
                WHEN A.INTCALCCODE IN (
                ''2''
                ,''3''
                )
                THEN CAST(A.I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * C.EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * C.CRYAMT_NOCF2
                ELSE (CAST(A.M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * C.EIR_NOCF2 * C.CRYAMT_NOCF2)
                END,
                PREV_UNAMORT1 = C.UNAMORT1
                ,PREV_UNAMORT2 = C.UNAMORT2
                ,PREV_CRYAMT1 = C.CRYAMT1
                ,PREV_CRYAMT2 = C.CRYAMT2
                ,EIR1 = C.EIR1
                ,EIR2 = C.EIR2
                ,EIRAMT1 =
                CASE 
                WHEN A.INTCALCCODE IN (
                ''1''
                ,''6''
                )
                THEN CAST(A.I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * C.EIR1 / 100 * C.CRYAMT1
                WHEN A.INTCALCCODE IN (
                ''2''
                ,''3''
                )
                THEN CAST(A.I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * C.EIR1 / 100 * C.CRYAMT1
                ELSE (CAST(A.M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * C.EIR1 * C.CRYAMT1)
                END
                ,EIRAMT2 = CASE WHEN A.INTCALCCODE IN (
                ''1''
                ,''6''
                )
                THEN CAST(A.I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * C.EIR2 / 100 * C.CRYAMT2
                WHEN A.INTCALCCODE IN (
                ''2''
                ,''3''
                )
                THEN CAST(A.I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * C.EIR2 / 100 * C.CRYAMT2
                ELSE (CAST(A.M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * C.EIR2 * C.CRYAMT2)
                END
                FROM IFRS_GS_DATE1 B,
                ' || V_TABLEINSERT3 || ' C
                WHERE A.MASTERID = B.MASTERID
                AND B.MASTERID = C.MASTERID
                AND C.COUNTER = ' || V_COUNTER || ' - 1
                AND A.COUNTER = ' || V_COUNTER || '';
                EXECUTE (V_STR_QUERY);

                CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '5');

                V_STR_QUERY := '';
                V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' A
                SET AMORT_NOCF1 = EIRAMT_NOCF1 - N_INT_PAYMENT
                ,AMORT_NOCF2 = EIRAMT_NOCF2 - N_INT_PAYMENT
                ,UNAMORT_NOCF1 = (EIRAMT_NOCF1 - N_INT_PAYMENT) + PREV_UNAMORT_NOCF1
                ,UNAMORT_NOCF2 = (EIRAMT_NOCF2 - N_INT_PAYMENT) + PREV_UNAMORT_NOCF2
                ,CRYAMT_NOCF1 = PREV_CRYAMT_NOCF1 + (EIRAMT_NOCF1 - N_INT_PAYMENT) - N_PRN_PAYMENT
                ,CRYAMT_NOCF2 = PREV_CRYAMT_NOCF2 + (EIRAMT_NOCF2 - N_INT_PAYMENT) - N_PRN_PAYMENT
                ,
                --WITH CF PART  
                AMORT1 = EIRAMT1 - N_INT_PAYMENT
                ,AMORT2 = EIRAMT2 - N_INT_PAYMENT
                ,UNAMORT1 = (EIRAMT1 - N_INT_PAYMENT) + PREV_UNAMORT1
                ,UNAMORT2 = (EIRAMT2 - N_INT_PAYMENT) + PREV_UNAMORT2
                ,CRYAMT1 = PREV_CRYAMT1 + (EIRAMT1 - N_INT_PAYMENT) - N_PRN_PAYMENT
                ,CRYAMT2 = PREV_CRYAMT2 + (EIRAMT2 - N_INT_PAYMENT) - N_PRN_PAYMENT
                FROM IFRS_GS_DATE1 B
                WHERE A.MASTERID = B.MASTERID 
                AND A.COUNTER = ' || V_COUNTER || '';
                EXECUTE (V_STR_QUERY);

                CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '6');

                V_COUNTER := V_COUNTER + 1;
            END LOOP;

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE TMP_T14';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO TMP_T14 (
            MASTERID
            ,E1
            )
            SELECT B.MASTERID
            ,C.EIR1
            FROM ' || V_TABLEINSERT2 || ' B
            JOIN IFRS_GS_DATE1 D ON B.MASTERID = D.MASTERID
            JOIN ' || V_TABLEINSERT3 || ' C ON C.COUNTER = B.CNTMAX 
            AND B.MASTERID = C.MASTERID
            AND ABS(C.UNAMORT1) < 0.01';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET FINAL_EIR = C.E1
            FROM TMP_T14 C
            WHERE A.MASTERID = C.MASTERID AND A.EIR IS NULL';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
            SET EIR = FINAL_EIR
            WHERE FINAL_EIR IS NOT NULL AND EIR IS NULL';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE TMP_T14';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO TMP_T14 (
            MASTERID
            ,E1
            )
            SELECT B.MASTERID
            ,C.EIR_NOCF1
            FROM ' || V_TABLEINSERT2 || ' B
            JOIN IFRS_GS_DATE1 D ON B.MASTERID = D.MASTERID  
            JOIN ' || V_TABLEINSERT3 || ' C ON C.COUNTER = B.CNTMAX
            AND B.MASTERID = C.MASTERID
            AND ABS(C.UNAMORT_NOCF1) < 0.01';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET FINAL_EIR_NOCF = C.E1
            FROM TMP_T14 C
            WHERE A.MASTERID = C.MASTERID AND A.EIR_NOCF IS NULL';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
            SET EIR_NOCF = FINAL_EIR_NOCF
            WHERE FINAL_EIR_NOCF IS NOT NULL AND EIR_NOCF IS NULL';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '7');

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE TMP_GS1';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO TMP_GS1 (
            MASTERID
            ,UNAMORT_NOCF1
            ,UNAMORT_NOCF2
            ,EIR_NOCF1
            ,EIR_NOCF2
            ,UNAMORT1
            ,UNAMORT2
            ,EIR1
            ,EIR2
            )
            SELECT B.MASTERID
            ,C.UNAMORT_NOCF1
            ,C.UNAMORT_NOCF2
            ,C.EIR_NOCF1
            ,C.EIR_NOCF2
            ,C.UNAMORT1
            ,C.UNAMORT2
            ,C.EIR1
            ,C.EIR2
            FROM ' || V_TABLEINSERT2 || ' B
            JOIN IFRS_GS_DATE1 D ON B.MASTERID = D.MASTERID
            JOIN ' || V_TABLEINSERT3 || ' C ON C.COUNTER = B.CNTMAX 
            AND B.MASTERID = C.MASTERID
            AND (B.EIR IS NULL OR B.EIR_NOCF IS NULL)';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET NEXT_EIR_NOCF = COALESCE(EIR_NOCF, CASE 
            WHEN ABS((((C.UNAMORT_NOCF2 - C.UNAMORT_NOCF1) / (C.EIR_NOCF2 - C.EIR_NOCF1)) * C.EIR_NOCF1 - C.UNAMORT_NOCF1) / ((C.UNAMORT_NOCF2 - C.UNAMORT_NOCF1) / (C.EIR_NOCF2 - C.EIR_NOCF1))) > 2000
            THEN 15
            ELSE (((CAST(C.UNAMORT_NOCF2 AS DOUBLE PRECISION) - CAST(C.UNAMORT_NOCF1 AS DOUBLE PRECISION)) / (CAST(C.EIR_NOCF2 AS DOUBLE PRECISION) - CAST(C.EIR_NOCF1 AS DOUBLE PRECISION))) * CAST(C.EIR_NOCF1 AS DOUBLE PRECISION) - CAST(C.UNAMORT_NOCF1 AS DOUBLE PRECISION)) / ((CAST(C.UNAMORT_NOCF2 AS DOUBLE PRECISION) - CAST(C.UNAMORT_NOCF1 AS DOUBLE PRECISION)) / (CAST(C.EIR_NOCF2 AS DOUBLE PRECISION) - CAST(C.EIR_NOCF1 AS DOUBLE PRECISION)))
            END)
            ,NEXT_EIR = COALESCE(EIR, CASE 
            WHEN ABS((((C.UNAMORT2 - C.UNAMORT1) / (C.EIR2 - C.EIR1)) * C.EIR1 - C.UNAMORT1) / ((C.UNAMORT2 - C.UNAMORT1) / (C.EIR2 - C.EIR1))) > 2000
            THEN 15
            ELSE (((CAST(C.UNAMORT2 AS DOUBLE PRECISION) - CAST(C.UNAMORT1 AS DOUBLE PRECISION)) / (CAST(C.EIR2 AS DOUBLE PRECISION) - CAST(C.EIR1 AS DOUBLE PRECISION))) * CAST(C.EIR1 AS DOUBLE PRECISION) - CAST(C.UNAMORT1 AS DOUBLE PRECISION)) / ((CAST(C.UNAMORT2 AS DOUBLE PRECISION) - CAST(C.UNAMORT1 AS DOUBLE PRECISION)) / (CAST(C.EIR2 AS DOUBLE PRECISION) - CAST(C.EIR1 AS DOUBLE PRECISION)))
            END)
            FROM TMP_GS1 C
            WHERE A.MASTERID = C.MASTERID
            AND (
            A.EIR IS NULL
            OR A.EIR_NOCF IS NULL
            )';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET FINAL_EIR = NEXT_EIR
            FROM TMP_GS1 C
            WHERE A.MASTERID = C.MASTERID
            AND A.EIR IS NULL
            AND C.EIR1 = A.NEXT_EIR
            AND ABS(C.UNAMORT1) < 1';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
            SET EIR = FINAL_EIR
            WHERE FINAL_EIR IS NOT NULL
            AND EIR IS NULL';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET FINAL_EIR_NOCF = NEXT_EIR_NOCF
            FROM TMP_GS1 C
            WHERE A.MASTERID = C.MASTERID
            AND A.EIR_NOCF IS NULL
            AND C.EIR_NOCF1 = A.NEXT_EIR_NOCF
            AND ABS(C.UNAMORT_NOCF1) < 1';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
            SET EIR_NOCF = FINAL_EIR_NOCF
            WHERE FINAL_EIR_NOCF IS NOT NULL
            AND EIR_NOCF IS NULL';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '8');

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE TMP_GS2';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO TMP_GS2 (
            MASTERID
            ,DTMIN
            ,CNTMIN
            ,NEXT_EIR
            ,NEXT_EIR_NOCF
            ,STAFFLOAN
            ,BENEFIT
            ,FEE_AMT
            ,COST_AMT
            ,GAIN_LOSS_FEE_AMT  
            ,GAIN_LOSS_COST_AMT  
            )
            SELECT B.MASTERID
            ,C.DTMIN
            ,C.CNTMIN
            ,C.NEXT_EIR
            ,C.NEXT_EIR_NOCF
            ,B.STAFFLOAN
            ,B.BENEFIT
            ,B.FEE_AMT
            ,B.COST_AMT
            ,COALESCE(B.GAIN_LOSS_FEE_AMT, 0) 
            ,COALESCE(B.GAIN_LOSS_COST_AMT, 0)
            FROM IFRS_ACCT_EIR_CF_ECF1 B
            JOIN ' || V_TABLEINSERT2 || ' C ON C.MASTERID = B.MASTERID
            AND (C.EIR IS NULL OR C.EIR_NOCF IS NULL)';
            EXECUTE (V_STR_QUERY);

            EXECUTE 'SELECT COUNT(*) FROM TMP_GS2' INTO V_VCNT2;

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', 'NOA GS : ' || CAST(V_VCNT2 AS VARCHAR(10)) ||  '');

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' A
            SET PREV_UNAMORT_NOCF1 = 0,
            EIR_NOCF1 = B.NEXT_EIR_NOCF
            ,EIR_NOCF2 = B.NEXT_EIR_NOCF + (CAST(0.001 AS DOUBLE PRECISION) * B.NEXT_EIR_NOCF)
            ,PREV_UNAMORT1 = CASE 
            WHEN B.STAFFLOAN = 1
            AND B.BENEFIT < 0
            THEN B.BENEFIT
            WHEN B.STAFFLOAN = 1
            AND B.BENEFIT >= 0
            THEN 0
            ELSE B.FEE_AMT - B.GAIN_LOSS_FEE_AMT  
            END + CASE 
            WHEN B.STAFFLOAN = 1
            AND B.BENEFIT <= 0
            THEN 0
            WHEN B.STAFFLOAN = 1
            AND B.BENEFIT > 0
            THEN B.BENEFIT
            ELSE B.COST_AMT - B.GAIN_LOSS_COST_AMT  
            END
            ,EIR1 = B.NEXT_EIR
            ,EIR2 = B.NEXT_EIR + (0.001 * B.NEXT_EIR)
            FROM TMP_GS2 B
            WHERE B.MASTERID = A.MASTERID
            AND A.COUNTER = B.CNTMIN ';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '9');

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' A
            SET PREV_UNAMORT_NOCF2 = PREV_UNAMORT_NOCF1
            ,PREV_CRYAMT_NOCF1 = N_OSPRN_PREV + PREV_UNAMORT_NOCF1
            ,PREV_CRYAMT_NOCF2 = N_OSPRN_PREV + PREV_UNAMORT_NOCF1
            ,EIRAMT_NOCF1 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF1 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
            END
            ,EIRAMT_NOCF2 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF2 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
            END
            ,AMORT_NOCF1 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF1 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
            END - N_INT_PAYMENT
            ,AMORT_NOCF2 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF2 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
            END - N_INT_PAYMENT
            ,UNAMORT_NOCF1 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF1 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
            END - N_INT_PAYMENT + PREV_UNAMORT_NOCF1
            ,UNAMORT_NOCF2 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF2 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
            END - N_INT_PAYMENT + PREV_UNAMORT_NOCF1
            ,CRYAMT_NOCF1 = (N_OSPRN_PREV + PREV_UNAMORT_NOCF1) - N_PRN_PAYMENT + (
            CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF1 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF1 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
            END - N_INT_PAYMENT
            ) + DISB_AMOUNT
            ,CRYAMT_NOCF2 = (N_OSPRN_PREV + PREV_UNAMORT_NOCF1) - N_PRN_PAYMENT + (
            CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR_NOCF2 / CAST(100 AS DOUBLE PRECISION) * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR_NOCF2 * (N_OSPRN_PREV + PREV_UNAMORT_NOCF1))
            END - N_INT_PAYMENT
            ) + DISB_AMOUNT
            ,
            -- WITH CF PART  
            PREV_UNAMORT2 = PREV_UNAMORT1
            ,PREV_CRYAMT1 = N_OSPRN_PREV + PREV_UNAMORT1
            ,PREV_CRYAMT2 = N_OSPRN_PREV + PREV_UNAMORT1
            ,EIRAMT1 =
            CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR1 * (N_OSPRN_PREV + PREV_UNAMORT1))
            /*  BCA DISABLE BPI END */
            END
            ,EIRAMT2 =
            CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR2 * (N_OSPRN_PREV + PREV_UNAMORT1))
            /*  BCA DISABLE BPI END */
            END
            ,AMORT1 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR1 * (N_OSPRN_PREV + PREV_UNAMORT1))
            END - N_INT_PAYMENT
            ,AMORT2 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR2 * (N_OSPRN_PREV + PREV_UNAMORT1))
            END - N_INT_PAYMENT
            ,UNAMORT1 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR1 * (N_OSPRN_PREV + PREV_UNAMORT1))
            END - N_INT_PAYMENT + PREV_UNAMORT1
            ,UNAMORT2 = CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR2 * (N_OSPRN_PREV + PREV_UNAMORT1))
            END - N_INT_PAYMENT + PREV_UNAMORT1
            ,CRYAMT1 = (N_OSPRN_PREV + PREV_UNAMORT1) - N_PRN_PAYMENT + (
            CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR1 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR1 * (N_OSPRN_PREV + PREV_UNAMORT1))
            END - N_INT_PAYMENT
            ) + DISB_AMOUNT
            ,CRYAMT2 = (N_OSPRN_PREV + PREV_UNAMORT1) - N_PRN_PAYMENT + (
            CASE 
            --WHEN INTCALCCODE IN (''2'',''6'') REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''1''
            ,''6''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(360 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            --WHEN INTCALCCODE = ''3'' REMARKS FOR ALIGN WITH ICC PAYMENT SCHEDULE 20160428  
            WHEN INTCALCCODE IN (
            ''2''
            ,''3''
            )
            THEN CAST(I_DAYS AS DOUBLE PRECISION) / CAST(365 AS DOUBLE PRECISION) * EIR2 / 100 * (N_OSPRN_PREV + PREV_UNAMORT1)
            ELSE (CAST(M AS DOUBLE PRECISION) / CAST(1200 AS DOUBLE PRECISION) * EIR2 * (N_OSPRN_PREV + PREV_UNAMORT1))
            END - N_INT_PAYMENT
            ) + DISB_AMOUNT
            FROM ' || V_TABLEINSERT2 || ' C
            WHERE C.MASTERID = A.MASTERID
            AND A.COUNTER = C.CNTMIN 
            AND (C.EIR IS NULL OR C.EIR_NOCF IS NULL)';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '10');

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE IFRS_GS_DATE1';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO IFRS_GS_DATE1 (
            MASTERID
            ,PMT_DATE
            ,PERIOD
            )
            SELECT MASTERID
            ,DTMIN
            ,PERIOD
            FROM ' || V_TABLEINSERT2 || '
            WHERE (
            EIR IS NULL
            OR EIR_NOCF IS NULL
            )';
            EXECUTE (V_STR_QUERY);
			
			END LOOP;

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '11');

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET FINAL_EIR = B.EIR1
            FROM (
            SELECT B.MASTERID
            ,C.EIR1
            FROM ' || V_TABLEINSERT2 || ' B
            JOIN ' || V_TABLEINSERT3 || ' C ON C.COUNTER = B.CNTMAX  
            AND B.MASTERID = C.MASTERID
            AND ABS(C.UNAMORT1) < 1
            ) B
            WHERE A.MASTERID = B.MASTERID
            AND A.EIR IS NULL';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
            SET EIR = FINAL_EIR
            WHERE FINAL_EIR IS NOT NULL
            AND EIR IS NULL';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET FINAL_EIR_NOCF = B.EIR_NOCF1
            FROM (
            SELECT B.MASTERID
            ,C.EIR_NOCF1
            FROM ' || V_TABLEINSERT2 || ' B
            JOIN ' || V_TABLEINSERT3 || ' C ON C.COUNTER = B.CNTMAX --C.PMT_DATE = B.DTMAX  
            AND B.MASTERID = C.MASTERID
            AND ABS(C.UNAMORT_NOCF1) < 1
            ) B
            WHERE A.MASTERID = B.MASTERID
            AND A.EIR_NOCF IS NULL';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || '	UPDATE ' || V_TABLEINSERT2 || '
            SET EIR_NOCF = FINAL_EIR_NOCF
            WHERE FINAL_EIR_NOCF IS NOT NULL
            AND EIR_NOCF IS NULL';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '12');

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET FINAL_EIR = B.EIR1
            FROM (
            SELECT B.MASTERID
            ,C.EIR1
            ,C.EIR_NOCF1
            FROM ' || V_TABLEINSERT2 || ' B
            JOIN ' || V_TABLEINSERT3 || ' C ON C.COUNTER = B.CNTMAX
            AND B.MASTERID = C.MASTERID
            AND ABS(C.UNAMORT1) < 10
            ) B
            WHERE A.MASTERID = B.MASTERID
            AND A.EIR IS NULL
            AND ABS(A.UNAMORT) > 1000000000';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
            SET EIR = FINAL_EIR
            WHERE FINAL_EIR IS NOT NULL
            AND EIR IS NULL';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A
            SET FINAL_EIR_NOCF = B.EIR_NOCF1
            FROM (
            SELECT B.MASTERID
            ,C.EIR_NOCF1
            FROM ' || V_TABLEINSERT2 || ' B
            JOIN ' || V_TABLEINSERT3 || ' C ON C.COUNTER = B.CNTMAX --C.PMT_DATE = B.DTMAX  
            AND B.MASTERID = C.MASTERID
            AND ABS(C.UNAMORT_NOCF1) < 10
            ) B
            WHERE A.MASTERID = B.MASTERID
            AND A.EIR_NOCF IS NULL
            AND ABS(A.UNAMORT_NOCF) > 1000000000';
            EXECUTE (V_STR_QUERY);

            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || '
            SET EIR_NOCF = FINAL_EIR_NOCF
            WHERE FINAL_EIR_NOCF IS NOT NULL
            AND EIR_NOCF IS NULL';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '13');

            ---- FAILED GOAL SEEK WITH CF PART
            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO IFRS_ACCT_EIR_FAILED_GS (
            DOWNLOAD_DATE
            ,MASTERID
            ,CREATEDBY
            ,CREATEDDATE
            )
            SELECT ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
            ,MASTERID
            ,''EIR_GS''
            ,CURRENT_TIMESTAMP
            FROM ' || V_TABLEINSERT2 || '
            WHERE EIR IS NULL';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '14');

            ---- SUCCESS GOAL SEEK WITH CF PART 
            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO IFRS_ACCT_EIR_GS_RESULT (
            DOWNLOAD_DATE
            ,MASTERID
            ,CREATEDBY
            ,CREATEDDATE
            ,EIR
            )
            SELECT ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
            ,MASTERID
            ,''EIR_GS''
            ,CURRENT_TIMESTAMP
            ,EIR
            FROM ' || V_TABLEINSERT2 || '
            WHERE EIR IS NOT NULL';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '15');

            ---- FAILED GOAL SEEK WITHOUT CF PART
            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO IFRS_ACCT_EIR_FAILED_GS4 (
            DOWNLOAD_DATE
            ,MASTERID
            ,CREATEDBY
            ,CREATEDDATE
            )
            SELECT ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
            ,MASTERID
            ,''EIR_GS''
            ,CURRENT_TIMESTAMP
            FROM ' || V_TABLEINSERT2 || '
            WHERE EIR_NOCF IS NULL';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'DEBUG', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '16');

            ---- SUCCESS GOAL SEEK WITHOUT CF PART 
            V_STR_QUERY := '';
            V_STR_QUERY := V_STR_QUERY || 'INSERT INTO IFRS_ACCT_EIR_GS_RESULT4 (
            DOWNLOAD_DATE
            ,MASTERID
            ,CREATEDBY
            ,CREATEDDATE
            ,EIR
            )
            SELECT ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
            ,MASTERID
            ,''EIR_GS''
            ,CURRENT_TIMESTAMP
            ,EIR_NOCF
            FROM ' || V_TABLEINSERT2 || '
            WHERE EIR_NOCF IS NOT NULL';
            EXECUTE (V_STR_QUERY);

            CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'END', 'SP_IFRS_ACCT_EIR_GS_PROCESS', '');

    
        
    RAISE NOTICE 'SP_IFRS_ACCT_EIR_GS_ALL | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT2;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_ACCT_EIR_GS_ALL';
    V_OPERATION = 'UPDATE';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT2 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$;