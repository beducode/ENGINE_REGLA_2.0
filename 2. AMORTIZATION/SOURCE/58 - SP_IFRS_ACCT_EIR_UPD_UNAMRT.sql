CREATE OR REPLACE SP_IFRS_ACCT_EIR_UPD_UNAMRT(IN P_RUNID CHARACTER VARYING DEFAULT 'S_00000_0000'::CHARACTER VARYING, IN P_DOWNLOAD_DATE DATE DEFAULT NULL::DATE, IN P_PRC CHARACTER VARYING DEFAULT 'S'::CHARACTER VARYING)
 LANGUAGE PLPGSQL
AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLENAME VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);

    ---- VARIABLE PROCESS
    V_PARAM_DISABLE_ACCRU_PREV INT;
    V_SL_METHOD VARCHAR(40);
    V_ROUND INT;
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := SUBSTRING(STACK FROM 'FUNCTION (.*?) LINE');
	V_SP_NAME := UPPER(LEFT(FCESIG::REG::TEXT, POSITION('(' IN FCESIG::REG::TEXT)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
        V_TABLEINSERT1 := 'IFRS_ACCT_EIR_ACF_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_ACCT_EIR_ECF_' || P_RUNID || '';
        V_TABLEINSERT3 := 'IFRS_IMA_AMORT_CURR_' || P_RUNID || '';
    ELSE 
        V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
        V_TABLEINSERT1 := 'IFRS_ACCT_EIR_ACF';
        V_TABLEINSERT2 := 'IFRS_ACCT_EIR_ECF';
        V_TABLEINSERT3 := 'IFRS_IMA_AMORT_CURR';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;

    SELECT VALUE1 INTO V_SL_METHOD
    FROM TBLM_COMMONCODEDETAIL
    WHERE COMMONCODE = 'SL_METHOD';

    IF V_SL_METHOD IS NULL OR V_SL_METHOD NOT IN ('ECF', 'NO_ECF') THEN 
        V_SL_METHOD := 'ECF';
    END IF;

    V_PARAM_DISABLE_ACCRU_PREV := 0;

    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN 
    
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'START', 'SP_IFRS_ACCT_EIR_UPD_UNAMRT', '');

    --GET ACTIVE ECF  
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_B1' || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_B1' || ' (MASTERID)  
        SELECT DISTINCT MASTERID  
        FROM ' || V_TABLEINSERT2 || ' 
        WHERE AMORTSTOPDATE IS NULL ';
    EXECUTE (V_STR_QUERY);
    
    -- CLEAN UP ALREADY DONE ON SP_PSAK_ACCT_SL_UPD_UNAMORT  
    --GET LAST ACF ID  

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_P1' || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_P1' || ' (ID)
        SELECT MAX(ID) ID  
        FROM ' || V_TABLEINSERT1 || ' 
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE  
        AND MASTERID IN (  
            SELECT MASTERID  
            FROM ' || 'TMP_B1' || ' 
        )  
        GROUP BY MASTERID ';
    EXECUTE (V_STR_QUERY);
    
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_U1' || '';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_U1' || ' 
        (  
            DOWNLOAD_DATE  
            ,MASTERID  
            ,N_UNAMORT_FEE  
            ,N_UNAMORT_COST  
            ,ECFDATE  
            ,ACCTNO  
            ,ENDAMORTDATE  
        ) SELECT 
            B.DOWNLOAD_DATE  
            ,B.MASTERID  
            ,B.N_UNAMORT_FEE  
            ,B.N_UNAMORT_COST  
            ,B.ECFDATE  
            ,B.ACCTNO  
            ,E.ENDAMORTDATE  
        FROM ' || V_TABLEINSERT1 || ' B  
        JOIN ' || 'TMP_P1' || ' C 
            ON C.ID = B.ID  
        LEFT JOIN ' || V_TABLEINSERT2 || ' E 
            ON E.MASTERID = B.MASTERID  
            AND E.PREV_PMT_DATE = E.PMT_DATE  
            AND E.DOWNLOAD_DATE = B.ECFDATE ';
    EXECUTE (V_STR_QUERY);
    
    -- UPDATE TO MASTER ACCT --SELECT * FROM IFRS_ACCT_EIR_ACF  
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT3 || ' A 
        SET  
            --UNAMORT_AMT_TOTAL = X.N_UNAMORT_FEE + X.N_UNAMORT_COST,  
            UNAMORT_FEE_AMT = X.N_UNAMORT_FEE  
            ,UNAMORT_COST_AMT = X.N_UNAMORT_COST  
            ,FAIR_VALUE_AMOUNT = A.OUTSTANDING + X.N_UNAMORT_FEE + X.N_UNAMORT_COST  
            --,FAIR_VALUE_AMOUNT = A.OUTSTANDING_JF + X.N_UNAMORT_FEE + X.N_UNAMORT_COST --20160510   
            ,LOAN_START_AMORTIZATION = X.ECFDATE  
            ,LOAN_END_AMORTIZATION = X.ENDAMORTDATE  
            ,AMORT_TYPE = ''EIR''  
        FROM ' || 'TMP_U1' || ' X  
        WHERE X.MASTERID = A.MASTERID  
        AND X.ACCTNO = A.ACCOUNT_NUMBER ';
    EXECUTE (V_STR_QUERY);
    
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' A 
        SET  
            --UNAMORT_AMT_TOTAL = B.UNAMORT_AMT_TOTAL,  
            UNAMORT_FEE_AMT = B.UNAMORT_FEE_AMT  
            ,UNAMORT_COST_AMT = B.UNAMORT_COST_AMT  
            ,FAIR_VALUE_AMOUNT = B.FAIR_VALUE_AMOUNT  
            ,LOAN_START_AMORTIZATION = B.LOAN_START_AMORTIZATION  
            ,LOAN_END_AMORTIZATION = B.LOAN_END_AMORTIZATION  
            ,AMORT_TYPE = B.AMORT_TYPE  
        FROM ' || V_TABLEINSERT3 || ' B  
        WHERE A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
            AND A.MASTERID = B.MASTERID  
            AND A.DOWNLOAD_DATE = B.DOWNLOAD_DATE   
            --  AND A.ACCOUNT_NUMBER = B.ACCOUNT_NUMBER  -- REMARK SAID 20190802 BTPN TUNING PURPOSES
            AND B.AMORT_TYPE = ''EIR'' ';
    EXECUTE (V_STR_QUERY);
    
    -- UPDATE EIR TO PMA 20151124 BY RIS  
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' A 
        SET EIR = B.N_EFF_INT_RATE  
        FROM (  
            SELECT 
                MASTERID  
                ,MAX(N_EFF_INT_RATE) N_EFF_INT_RATE  
            FROM ' || V_TABLEINSERT2 || ' 
            WHERE AMORTSTOPDATE IS NULL  
            AND PREV_PMT_DATE = PMT_DATE  
            GROUP BY MASTERID  
        ) B  
        WHERE A.MASTERID = B.MASTERID  
            AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    ---- END
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'END', 'SP_IFRS_ACCT_EIR_UPD_UNAMRT', '');

    RAISE NOTICE 'SP_IFRS_ACCT_EIR_UPD_UNAMRT | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT2;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_ACCT_EIR_UPD_UNAMRT';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT2 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$
