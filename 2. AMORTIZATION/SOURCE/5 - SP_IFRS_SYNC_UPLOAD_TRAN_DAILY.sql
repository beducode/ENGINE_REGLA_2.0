CREATE OR REPLACE PROCEDURE SP_IFRS_SYNC_UPLOAD_TRAN_DAILY(IN P_RUNID CHARACTER VARYING DEFAULT 'S_00000_0000'::CHARACTER VARYING, IN P_DOWNLOAD_DATE DATE DEFAULT NULL::DATE, IN P_PRC CHARACTER VARYING DEFAULT 'S'::CHARACTER VARYING)
LANGUAGE PLPGSQL
AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TMPTABLE1 VARCHAR(100);
    V_TMPTABLE2 VARCHAR(100);
    V_TMPTABLE3 VARCHAR(100);
    
    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := substring(STACK from 'function (.*?) line');
	V_SP_NAME := UPPER(LEFT(fcesig::regprocedure::text, POSITION('(' in fcesig::regprocedure::text)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
        V_TABLEINSERT1 := 'IFRS_TRANSACTION_DAILY_' || P_RUNID || '';
        V_TABLEINSERT2 := 'IFRS_TRX_FACILITY_HEADER_' || P_RUNID || '';
        V_TMPTABLE1 := 'TMP_DM_LIMIT_' || P_RUNID || '';
        V_TMPTABLE2 := 'TMP_STG_CIF_IFTH_' || P_RUNID || '';
        V_TMPTABLE3 := 'TMP_STG_N3L_UNDRAWN_' || P_RUNID || '';
    ELSE 
        V_TABLEINSERT1 := 'IFRS_TRANSACTION_DAILY';
        V_TABLEINSERT2 := 'IFRS_TRX_FACILITY_HEADER';
        V_TMPTABLE1 := 'TMP_DM_LIMIT';
        V_TMPTABLE2 := 'TMP_STG_CIF_IFTH';
        V_TMPTABLE3 := 'TMP_STG_N3L_UNDRAWN';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;
    
    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN
        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT1 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT1 || ' AS SELECT * FROM IFRS_TRANSACTION_DAILY WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TABLEINSERT2 || ' ';
        EXECUTE (V_STR_QUERY);

        V_STR_QUERY := '';
        V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TABLEINSERT2 || ' AS SELECT * FROM IFRS_TRX_FACILITY_HEADER WHERE 1=0 ';
        EXECUTE (V_STR_QUERY);
    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== STG TABLE ======
    ---- TODO: REMOVE THIS ONCE THE DB STG ARE CREATED
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE IF NOT EXISTS DM_LIMIT (
        YMD DATE,
        BR_CD VARCHAR(100),
        LIMIT_ID VARCHAR(100)
    ) ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE IF NOT EXISTS STG_CIF (
        CIF VARCHAR(100),
        CUSTOMER_TYPE VARCHAR(100),
        SOURCE_SYSTEM VARCHAR(100)
    ) ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE IF NOT EXISTS STG_N3L_UNDRAWN (
        YMD DATE 
        ,LIMIT_ID VARCHAR(100) 
        ,REPORT_LIMIT_ID VARCHAR(100) 
        ,LIMIT_PRODUCT VARCHAR(100) 
        ,LIMIT_CURRENCY VARCHAR(3) 
        ,LIMIT_CURRENCY_RATE NUMERIC(32, 6) 
        ,CIF_NO VARCHAR(100) 
        ,OLD_CIF_NUMBER VARCHAR(100) 
        ,EXPIRY_DATE DATE 
        ,SECOND_AGREE_DT DATE 
        ,STG_LIMIT_AMT NUMERIC(32, 6) 
    ) ';
    EXECUTE (V_STR_QUERY);
    ---------- ====== STG TABLE ======

    -------- ====== BODY ======
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT1 || ' 
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND SOURCE_TABLE = ''TBLU_TRANS_ASSET'' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TMPTABLE1 || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TMPTABLE1 || ' AS 
        SELECT YMD, BR_CD, LIMIT_ID 
        FROM DM_LIMIT 
        WHERE YMD = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        GROUP BY YMD, BR_CD, LIMIT_ID ';
    EXECUTE (V_STR_QUERY);
    
    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TMPTABLE2 || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TMPTABLE2 || ' AS 
        SELECT CIF, CUSTOMER_TYPE, SOURCE_SYSTEM 
        FROM STG_CIF 
        WHERE SOURCE_SYSTEM = ''EQ'' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS NCI_STG_CIF_IFTH';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX NCI_STG_CIF_IFTH ON ' || V_TMPTABLE2 || ' (CIF ASC, SOURCE_SYSTEM ASC) ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP TABLE IF EXISTS ' || V_TMPTABLE3 || ' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE TABLE ' || V_TMPTABLE3 || ' AS 
        SELECT * FROM STG_N3L_UNDRAWN 
        WHERE YMD = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DROP INDEX IF EXISTS NCI_STG_N3L_UNDRAWN';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'CREATE INDEX NCI_STG_N3L_UNDRAWN ON ' || V_TMPTABLE3 || ' (LIMIT_ID ASC, REPORT_LIMIT_ID ASC, YMD ASC) ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT1 || ' 
        ( 
            DOWNLOAD_DATE 
            ,EFFECTIVE_DATE 
            ,MATURITY_DATE 
            ,MASTERID 
            ,ACCOUNT_NUMBER 
            ,FACILITY_NUMBER 
            ,CUSTOMER_NUMBER 
            ,BRANCH_CODE 
            ,DATA_SOURCE 
            ,PRD_TYPE 
            ,PRD_CODE 
            ,TRX_CODE 
            ,CCY 
            ,EVENT_CODE 
            ,TRX_REFERENCE_NUMBER 
            ,ORG_CCY_AMT 
            ,EQV_LCY_AMT 
            ,DEBET_CREDIT_FLAG 
            ,TRX_SOURCE 
            ,INTERNAL_NO 
            ,REVOLVING_FLAG 
            ,CREATED_DATE 
            ,SOURCE_TABLE 
            ,TRX_LEVEL  
        ) SELECT 
            A.TRANSACTION_DATE::DATE AS DOWNLOAD_DATE 
            ,A.TRANSACTION_DATE::DATE AS EFFECTIVE_DATE 
            ,C.LOAN_DUE_DATE AS MATURITY_DATE 
            ,C.MASTERID 
            ,C.ACCOUNT_NUMBER 
            ,A.FACILITY_NUMBER 
            ,C.CUSTOMER_NUMBER 
            ,C.BRANCH_CODE 
            ,C.DATA_SOURCE 
            ,C.PRODUCT_TYPE 
            ,A.PRD_CODE 
            ,A.TRX_CODE 
            ,A.CURRENCY 
            ,'''' AS EVENT_CODE 
            ,'''' AS TRX_REFERENCE_NUMBER 
            ,A.TRANSACTION_AMOUNT::REAL AS ORG_CCY_AMT 
            ,A.TRANSACTION_AMOUNT::REAL * C.EXCHANGE_RATE AS EQV_LCY_AMT 
            ,A.DEBIT_CREDIT_FLAG 
            ,'''' AS TRX_SOURCE 
            ,'''' AS INTERNAL_NO 
            ,'''' AS REVOLVING_FLAG 
            ,CURRENT_TIMESTAMP 
            ,''TBLU_TRANS_ASSET'' AS SOURCE_TABLE 
            ,'''' AS TRX_LEVEL 
        FROM TBLU_TRANS_ASSET A 
        JOIN IFRS_MASTER_ACCOUNT C 
        ON A.ACCOUNT_NUMBER = C.MASTERID 
        AND CAST(A.TRANSACTION_DATE AS VARCHAR(10))::DATE = C.DOWNLOAD_DATE 
        JOIN IFRS_MASTER_TRANS_PARAM D 
        ON (A.PRD_CODE = D.PRD_CODE OR D.PRD_CODE = ''ALL'') 
        AND A.TRX_CODE = D.TRX_CODE 
        WHERE D.INST_CLS_VALUE IN (''A'', ''O'') 
        AND CAST(A.TRANSACTION_DATE AS VARCHAR(10))::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'DELETE FROM ' || V_TABLEINSERT2 || ' 
        WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND CREATEDBY = ''TBLU_FACILITY_FEECOST'' ';
    EXECUTE (V_STR_QUERY);

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || V_TABLEINSERT2 || ' 
        (
            DOWNLOAD_DATE 
            ,TRX_DATE 
            ,FACILITY_NUMBER 
            ,CUSTOMER_NUMBER 
            ,CUSTOMER_TYPE 
            ,BRANCH_CODE 
            ,TRX_CODE 
            ,FLAG_CF 
            ,PLAFOND 
            ,DATA_SOURCE 
            ,PRD_TYPE 
            ,PRD_CODE 
            ,TRX_DR_CR 
            ,CCY 
            ,MATURITY_DATE 
            ,EXCHANGE_RATE 
            ,STATUS 
            ,TRX_AMOUNT 
            ,CREATEDBY 
            ,CREATEDDATE 
            ,CREATEDHOST 
            ,START_DATE 
            ,LIMIT_CURRENCY 
            ,LIMIT_EXCHANGE_RATE 
        ) SELECT 
            A.DOWNLOAD_DATE::DATE 
            ,TRANSACTION_DATE::DATE AS TRX_DATE 
            ,FACILITY_NUMBER 
            ,CASE WHEN COALESCE(C.OLD_CIF_NUMBER, '''') = '''' THEN C.CIF_NO ELSE C.OLD_CIF_NUMBER END AS CUSTOMER_NUMBER 
            ,SCF.CUSTOMER_TYPE 
            --,A.BRANCH_CODE 
            ,DM.BR_CD AS BRANCH_CODE 
            ,A.TRX_CODE 
            ,CASE WHEN D.IFRS_TXN_CLASS = ''FEE'' THEN ''F'' ELSE ''C'' END 
            ,C.STG_LIMIT_AMT / COALESCE(C.LIMIT_CURRENCY_RATE, 1) AS PLAFOND 
            ,''LIMIT_T24'' AS DATA_SOURCE 
            ,E.PRD_TYPE 
            ,E.PRD_CODE 
            ,DEBIT_CREDIT_FLAG AS TRX_DR_CR 
            ,A.CCY 
            ,C.EXPIRY_DATE AS MATURITY_DATE 
            ,RATE.RATE_AMOUNT AS EXCHANGE_RATE 
            ,''ACT'' AS STATUS 
            ,TRANSACTION_AMOUNT::REAL AS TRX_AMOUNT 
            ,''TBLU_FACILITY_FEECOST'' AS CREATEDBY 
            ,A.CREATEDDATE 
            ,A.CREATEDHOST 
            ,C.SECOND_AGREE_DT AS START_DATE 
            ,C.LIMIT_CURRENCY 
            ,C.LIMIT_CURRENCY_RATE AS LIMIT_EXCHANGE_RATE 
        FROM TBLU_FACILITY_FEECOST A 
        JOIN IFRS_MASTER_TRANS_PARAM D 
        ON (A.PRD_CODE = D.PRD_CODE OR D.PRD_CODE = ''ALL'') AND A.TRX_CODE = D.TRX_CODE 
        INNER JOIN ' || V_TMPTABLE3 || ' C 
        ON A.FACILITY_NUMBER = COALESCE(C.REPORT_LIMIT_ID, C.LIMIT_ID) AND C.YMD = A.DOWNLOAD_DATE::DATE 
        INNER JOIN IFRS_MASTER_EXCHANGE_RATE RATE 
        ON A.DOWNLOAD_DATE::DATE = RATE.DOWNLOAD_DATE 
        AND RATE.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE 
        AND A.CCY = RATE.CURRENCY 
        LEFT JOIN IFRS_MASTER_PRODUCT_PARAM E 
        ON E.PRD_CODE = C.LIMIT_PRODUCT 
        LEFT JOIN ' || V_TMPTABLE2 || ' SCF 
        ON C.CIF_NO = SCF.CIF 
        LEFT JOIN ' || V_TMPTABLE1 || ' DM 
        ON COALESCE(C.REPORT_LIMIT_ID, C.LIMIT_ID) = DM.LIMIT_ID AND C.YMD = DM.YMD 
        WHERE D.INST_CLS_VALUE IN (''A'', ''O'') 
        AND CAST(A.TRANSACTION_DATE AS VARCHAR(10))::DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    GET DIAGNOSTICS V_RETURNROWS = ROW_COUNT;
    V_RETURNROWS2 := V_RETURNROWS2 + V_RETURNROWS;
    V_RETURNROWS := 0;

    V_STR_QUERY := '';
    V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT2 || ' A 
        SET SEGMENT_FLAG = B.SEGMENT_FLAG 
        FROM IFRS_MASTER_ACCOUNT B 
        WHERE A.FACILITY_NUMBER = B.MASTERID AND A.DOWNLOAD_DATE = B.DOWNLOAD_DATE 
        AND B.DATA_SOURCE = ''LIMIT_T24'' AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
    EXECUTE (V_STR_QUERY);

    ---- CALL SP_IFRS_EXEC_RULE_ITFH('GL', V_CURRDATE); --* ORIGINAL SQLSERVER
    CALL SP_IFRS_EXEC_RULE(P_RUNID, V_CURRDATE, P_PRC, 'GL');

    RAISE NOTICE 'SP_IFRS_SYNC_UPLOAD_TRAN_DAILY | AFFECTED RECORD : %', V_RETURNROWS2;
    ---------- ====== BODY ======

    -------- ====== LOG ======
    V_TABLEDEST = V_TABLEINSERT1;
    V_COLUMNDEST = '-';
    V_SPNAME = 'SP_IFRS_SYNC_UPLOAD_TRAN_DAILY';
    V_OPERATION = 'INSERT';
    
    CALL SP_IFRS_EXEC_AND_LOG(V_CURRDATE, V_TABLEDEST, V_COLUMNDEST, V_SPNAME, V_OPERATION, V_RETURNROWS2, P_RUNID);
    -------- ====== LOG ======

    -------- ====== RESULT ======
    V_QUERYS = 'SELECT * FROM ' || V_TABLEINSERT1 || '';
    CALL SP_IFRS_RESULT_PREV(V_CURRDATE, V_QUERYS, V_SPNAME, V_RETURNROWS2, P_RUNID);
    -------- ====== RESULT ======

END;

$$
