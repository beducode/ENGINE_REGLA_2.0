CREATE OR REPLACE SP_IFRS_ACCT_SL_ECF_EVENT(IN P_RUNID CHARACTER VARYING DEFAULT 'S_00000_0000'::CHARACTER VARYING, IN P_DOWNLOAD_DATE DATE DEFAULT NULL::DATE, IN P_PRC CHARACTER VARYING DEFAULT 'S'::CHARACTER VARYING)
 LANGUAGE PLPGSQL
AS $$
DECLARE
    ---- DATE
    V_PREVDATE DATE;
    V_CURRDATE DATE;

    ---- QUERY   
    V_STR_QUERY TEXT;

    ---- TABLE LIST       
	V_TABLENAME VARCHAR(100);
    V_TABLEINSERT1 VARCHAR(100);
    V_TABLEINSERT2 VARCHAR(100);
    V_TABLEINSERT3 VARCHAR(100);
    V_TABLEINSERT4 VARCHAR(100);
    V_TABLEINSERT5 VARCHAR(100);

    ---- CONDITION
    V_RETURNROWS INT;
    V_RETURNROWS2 INT;
    V_TABLEDEST VARCHAR(100);
    V_COLUMNDEST VARCHAR(100);
    V_SPNAME VARCHAR(100);
    V_OPERATION VARCHAR(100);

    ---- RESULT
    V_QUERYS TEXT;

    --- VARIABLE
    V_SP_NAME VARCHAR(100);
    STACK TEXT; 
    FCESIG TEXT;
BEGIN 
    -------- ====== VARIABLE ======
	GET DIAGNOSTICS STACK = PG_CONTEXT;
	FCESIG := SUBSTRING(STACK FROM 'FUNCTION (.*?) LINE');
	V_SP_NAME := UPPER(LEFT(FCESIG::REG::TEXT, POSITION('(' IN FCESIG::REG::TEXT)-1));

    IF COALESCE(P_PRC, NULL) IS NULL THEN
        P_PRC := 'S';
    END IF;

    IF COALESCE(P_RUNID, NULL) IS NULL THEN
        P_RUNID := 'S_00000_0000';
    END IF;

    IF P_PRC = 'S' THEN 
		V_TABLENAME := 'TMP_IMA_' || P_RUNID || '';
		V_TABLEINSERT1 := 'IFRS_ACCT_CLOSED_' || P_RUNID || '';
		V_TABLEINSERT2 := 'IFRS_ACCT_COST_FEE_' || P_RUNID || '';
		V_TABLEINSERT3 := 'IFRS_ACCT_SL_ECF_' || P_RUNID || '';
		V_TABLEINSERT4 := 'IFRS_IMA_AMORT_CURR_' || P_RUNID || '';
		V_TABLEINSERT5 := 'IFRS_IMA_AMORT_PREV_' || P_RUNID || '';
    ELSE 
		V_TABLENAME := 'IFRS_MASTER_ACCOUNT';
		V_TABLEINSERT1 := 'IFRS_ACCT_CLOSED';
		V_TABLEINSERT2 := 'IFRS_ACCT_COST_FEE';
		V_TABLEINSERT3 := 'IFRS_ACCT_SL_ECF';
		V_TABLEINSERT4 := 'IFRS_IMA_AMORT_CURR';
		V_TABLEINSERT5 := 'IFRS_IMA_AMORT_PREV';
    END IF;
    
    IF P_DOWNLOAD_DATE IS NULL 
    THEN
        SELECT
            CURRDATE, PREVDATE INTO V_CURRDATE, V_PREVDATE
        FROM
            IFRS_PRC_DATE;
    ELSE        
        V_CURRDATE := P_DOWNLOAD_DATE;
        V_PREVDATE := V_CURRDATE - INTERVAL '1 DAY';
    END IF;

    V_RETURNROWS2 := 0;
    -------- ====== VARIABLE ======

    -------- RECORD RUN_ID --------
    CALL SP_IFRS_RUNNING_LOG(V_CURRDATE, V_SP_NAME, P_RUNID, PG_BACKEND_PID(), CURRENT_DATE);
    -------- RECORD RUN_ID --------

    -------- ====== PRE SIMULATION TABLE ======
    IF P_PRC = 'S' THEN

    END IF;
    -------- ====== PRE SIMULATION TABLE ======

    -------- ====== BODY ======
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'START', 'SP_IFRS_ACCT_SL_ECF_EVENT', '');

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || ' A 
		SET 
			EIR_STATUS = ''''
			,ECF_STATUS = ''''
		WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		AND ECF_STATUS = ''Y'' ';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLENAME || ' A 
		SET 
			EIR_STATUS = ''''
			,ECF_STATUS = ''''
		WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_ECF_ACT' || '';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_ECF_ACT' || ' (MASTERID) 
		SELECT DISTINCT MASTERID
		FROM ' || V_TABLEINSERT3 || ' 
		WHERE AMORTSTOPDATE IS NULL
		AND DOWNLOAD_DATE <= ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_T1' || '';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_T1' || ' (MASTERID) 
		SELECT A.MASTERID
		FROM ' || V_TABLEINSERT4 || ' A
		JOIN ' || V_TABLEINSERT5 || ' B 
			ON A.MASTERID = B.MASTERID
		JOIN ' || 'TMP_ECF_ACT' || ' C 
			ON C.MASTERID = A.MASTERID
		WHERE A.LOAN_DUE_DATE != B.LOAN_DUE_DATE
			AND A.LOAN_DUE_DATE > ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE -- DONT DETECT IF DUE DATE IS INVALID
			AND A.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE ';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'TRUNCATE TABLE ' || 'TMP_T2' || '';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'INSERT INTO ' || 'TMP_T2' || ' (MASTERID) 
		SELECT DISTINCT A.MASTERID
		FROM ' || V_TABLEINSERT4 || ' A
		JOIN ' || V_TABLEINSERT2 || ' B 
			ON B.DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
			AND A.MASTERID = B.MASTERID
			AND B.STATUS = ''ACT''
			AND B.METHOD = ''SL'' ';
	EXECUTE (V_STR_QUERY);

	V_STR_QUERY := '';
	V_STR_QUERY := V_STR_QUERY || 'UPDATE ' || V_TABLEINSERT4 || ' A 
		SET 
			EIR_STATUS = ''Y''
			,ECF_STATUS = ''Y''
		WHERE MASTERID IN (
			SELECT MASTERID
			FROM ' || 'TMP_T1' || '
			
			UNION
			
			SELECT MASTERID
			FROM ' || 'TMP_T2' || '
		)
		AND DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		--DONT DO IF CLOSED
		AND MASTERID NOT IN (
			SELECT DISTINCT MASTERID
			FROM ' || V_TABLEINSERT1 || ' 
			WHERE DOWNLOAD_DATE = ''' || CAST(V_CURRDATE AS VARCHAR(10)) || '''::DATE
		) ';
	EXECUTE (V_STR_QUERY);

    ---- END
    CALL SP_IFRS_LOG_AMORT(V_CURRDATE, 'END', 'SP_IFRS_ACCT_SL_ECF_EVENT', '');
    ---------- ====== BODY ======

END;

$$
