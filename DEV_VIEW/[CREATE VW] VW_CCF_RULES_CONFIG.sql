DROP VIEW IF EXISTS VW_CCF_RULES_CONFIG CASCADE;

CREATE VIEW VW_CCF_RULES_CONFIG AS
SELECT * FROM dblink('workflow_ntt_impairment','SELECT * FROM (
SELECT A.PKID,
UPPER(A.CCF_RULE_NAME) AS CCF_RULE_NAME,
A.SEGMENTATION_ID,
UPPER(A.CALC_METHOD) AS CALC_METHOD,
UPPER(A.AVERAGE_METHOD) AS AVERAGE_METHOD,
A.DEFAULT_RULE_ID,
A.CUT_OFF_DATE,
A.CCF_OVERRIDE, 
CASE WHEN B.IS_ACTIVE = TRUE THEN 1 ELSE 0 END ACTIVE_FLAG,
0 AS IS_DELETE,
''SYSTEM'' AS CREATEDBY,
CURRENT_DATE AS CREATEDDATE,
''LOCALHOST'' AS CREATEDHOST,
1 AS LAG_1MONTH_FLAG,
''PENDING'' AS RUNNING_STATUS FROM (
SELECT A.SYSCODE_CCF_CONFIG AS SYSCODE_CCF_CONFIG,
MAX(A.PKID) AS PKID,
MAX(A.CCF_NAME) AS CCF_RULE_NAME,
MAX(B.SYSCODE_SEGMENTATION) AS SEGMENT_CODE,
MAX(B.PKID) AS SEGMENTATION_ID,
MAX(A.CALCULATION_METHOD) AS CALC_METHOD,
MAX(A.METHOD) AS AVERAGE_METHOD,
0 AS DEFAULT_RULE_ID,
MAX(A.EFFECTIVE_END_DATE::DATE) AS CUT_OFF_DATE,
0 AS CCF_OVERRIDE
FROM "CcfConfiguration" A
LEFT JOIN "Segmentation" B ON A.SEGMENT_CODE = B.SYSCODE_SEGMENTATION
GROUP BY A.SYSCODE_CCF_CONFIG) A
INNER JOIN "CcfConfiguration" B ON A.PKID = B.PKID
WHERE B.IS_ACTIVE = TRUE
) AS IFRS_CCF_RULES_CONFIG') AS CCF_RULES_CONFIG(PKID BIGINT
,CCF_RULE_NAME CHARACTER VARYING(250)
,SEGMENTATION_ID BIGINT
,CALC_METHOD CHARACTER VARYING(20)
,AVERAGE_METHOD CHARACTER VARYING(20)
,DEFAULT_RULE_ID BIGINT
,CUT_OFF_DATE DATE
,CCF_OVERRIDE DOUBLE PRECISION
,ACTIVE_FLAG INTEGER
,IS_DELETE INTEGER
,CREATEDBY CHARACTER VARYING(36)
,CREATEDDATE TIMESTAMP WITHOUT TIME ZONE
,CREATEDHOST CHARACTER VARYING(30)
,LAG_1MONTH_FLAG INTEGER
,RUNNING_STATUS CHARACTER VARYING(20));