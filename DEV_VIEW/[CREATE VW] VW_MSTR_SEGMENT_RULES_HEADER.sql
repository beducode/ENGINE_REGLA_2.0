DROP VIEW IF EXISTS VW_MSTR_SEGMENT_RULES_HEADER CASCADE;

CREATE VIEW VW_MSTR_SEGMENT_RULES_HEADER 
AS
SELECT * FROM dblink('workflow_ntt_impairment','SELECT (SELECT PKID FROM (
SELECT MAX(PKID) AS PKID ,SYSCODE_SEGMENTATION, MAX(SEGMENT_NAME) AS SEGMENT_NAME, MAX(PARENT_CODE_LEVEL_0) AS PARENT_CODE_LEVEL_0 
FROM "Segmentation" B WHERE B.LEVEL = 0
GROUP BY SYSCODE_SEGMENTATION
) B WHERE A.PARENT_CODE_LEVEL_0 = B.SYSCODE_SEGMENTATION
) AS PKID,
(SELECT UPPER(SEGMENT_NAME) FROM (
SELECT MAX(PKID) AS PKID ,SYSCODE_SEGMENTATION, MAX(SEGMENT_NAME) AS SEGMENT_NAME, MAX(PARENT_CODE_LEVEL_0) AS PARENT_CODE_LEVEL_0 
FROM "Segmentation" B WHERE B.LEVEL = 0
GROUP BY SYSCODE_SEGMENTATION
) C WHERE A.PARENT_CODE_LEVEL_0 = C.SYSCODE_SEGMENTATION
) AS GROUP_SEGMENT,
(SELECT UPPER(SEGMENT_NAME) FROM (
SELECT MAX(PKID) AS PKID ,SYSCODE_SEGMENTATION, MAX(SEGMENT_NAME) AS SEGMENT_NAME, MAX(PARENT_CODE_LEVEL_1) AS PARENT_CODE_LEVEL_1 
FROM "Segmentation" B WHERE B.LEVEL = 1
GROUP BY SYSCODE_SEGMENTATION
) D WHERE A.PARENT_CODE_LEVEL_1 = D.SYSCODE_SEGMENTATION
) AS SEGMENT,
UPPER(A.SEGMENT_NAME) AS SUB_SEGMENT,
''IFRS_MASTER_ACCOUNT'' AS TABLE_NAME,
(
SELECT UPPER(SQL_CONDITIONS) FROM 
(SELECT (SELECT SQL_CONDITIONS FROM "Segmentation" X WHERE LEVEL = 2 AND X.PKID = MAX(Y.PKID)) AS SQL_CONDITIONS, Y.SYSCODE_SEGMENTATION
FROM "Segmentation" Y
WHERE LEVEL = 2 
GROUP BY Y.SYSCODE_SEGMENTATION) D WHERE A.SYSCODE_SEGMENTATION = D.SYSCODE_SEGMENTATION
) AS SQL_CONDITION,
CASE WHEN A.IS_ACTIVE = TRUE THEN 1 ELSE 0 END ACTIVE_FLAG,
CASE WHEN A.SEGMENT_TYPE IS NULL THEN ''PORTFOLIO_SEGMENT'' ELSE A.SEGMENT_TYPE || ''_SEGMENT'' END AS SEGMENT_TYPE,
(SELECT SEQUENCE FROM (
SELECT MAX(PKID) AS PKID ,SYSCODE_SEGMENTATION, MAX(LEVEL) AS SEQUENCE, MAX(PARENT_CODE_LEVEL_1) AS PARENT_CODE_LEVEL_1 
FROM "Segmentation" B WHERE B.LEVEL = 1
GROUP BY SYSCODE_SEGMENTATION
) D WHERE A.PARENT_CODE_LEVEL_1 = D.SYSCODE_SEGMENTATION
) AS SEQUENCE,
1 AS IS_NEW,
CASE WHEN A.IS_ACTIVE = TRUE THEN 0 ELSE 1 END IS_DELETE,
''SYSTEM'' AS CREATEDBY,
CURRENT_DATE AS CREATEDDATE,
''LOCALHOST'' AS CREATEDHOST
FROM (
SELECT MAX(PKID) AS PKID
,SYSCODE_SEGMENTATION
,MAX(VERSION) AS VERSION
,MAX(PARENT_CODE_LEVEL_0) AS PARENT_CODE_LEVEL_0
,MAX(PARENT_CODE_LEVEL_1) AS PARENT_CODE_LEVEL_1
,MAX(PARENT_CODE) AS PARENT_CODE
,MAX(SEGMENT_NAME) AS SEGMENT_NAME
,MAX(SEGMENT_TYPE) AS SEGMENT_TYPE
,MAX(DESCRIPTION) AS DESCRIPTION
,MAX(LEVEL) AS LEVEL 
,MAX(EFFECTIVE_START_DATE) AS EFFECTIVE_START_DATE
,MAX(EFFECTIVE_END_DATE) AS EFFECTIVE_END_DATE
,IS_ACTIVE
,IS_PUBLISH
,IS_LAST_CHILD
,MAX(JSON_CONDITIONS) AS JSON_CONDITIONS
,MAX(SQL_CONDITIONS) AS SQL_CONDITIONS
,MAX(CREATED_BY) AS CREATED_BY
,MAX(CREATED_DATE) AS CREATED_DATE
,MAX(CREATED_HOST) AS CREATED_HOST
,MAX(UPDATED_BY) AS UPDATED_BY
,MAX(UPDATED_DATE) AS UPDATED_DATE
,MAX(UPDATED_HOST) AS UPDATED_HOST 
,MAX(MERGE_SQL_CONDITIONS) AS MERGE_SQL_CONDITIONS
FROM "Segmentation" WHERE LEVEL = 2 AND IS_ACTIVE = TRUE AND IS_PUBLISH = TRUE
GROUP BY SYSCODE_SEGMENTATION
,IS_ACTIVE
,IS_PUBLISH
,IS_LAST_CHILD
) A') AS MSTR_SEGMENT_RULES_HEADER(PKID BIGINT
,GROUP_SEGMENT VARCHAR(50)
,SEGMENT VARCHAR(50)
,SUB_SEGMENT VARCHAR(60)
,TABLE_NAME VARCHAR(100)
,SQL_CONDITION TEXT
,ACTIVE_FLAG INT
,SEGMENT_TYPE VARCHAR(50)
,SEQUENCE INT
,IS_NEW INT
,IS_DELETE INT
,CREATEDBY CHARACTER VARYING(36)
,CREATEDDATE TIMESTAMP WITHOUT TIME ZONE
,CREATEDHOST CHARACTER VARYING(30));